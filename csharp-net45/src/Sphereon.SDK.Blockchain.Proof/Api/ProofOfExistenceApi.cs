/* 
 * Sphereon :: BLOCKCHAIN :: PROOF API
 *
 * <b>The Blockchain Proof API is an easy to prove existence of (binary) data at a certain point in time. Behinde the scenes it stores entries using the Factom (bitcoin) blockchain by means of our generic blockchain API.</b>    The flow is generally as follows:  1. Make sure a Proof chain has been created using the /chain POST endpoint beforehand. Normally you only need one or a handful of chains, during the entiry lifetime of your proof solution. This is a relative expensive operation in terms of money.  2. Store proof entries on the proof chain from step 1. The entries will contain the content and metadata you want to store forever on the specified chain.  3. Retrieve an existing entry from the chain to verify or retrieve data      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1.0
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Sphereon.SDK.Blockchain.Proof.Client;
using Sphereon.SDK.Blockchain.Proof.Model;

namespace Sphereon.SDK.Blockchain.Proof.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProofOfExistenceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new existence chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Create a new Proof of Existence chain using the provided existence settings</param>
        /// <returns>CreateChainResponse</returns>
        CreateChainResponse CreateChain (CreateChainRequest request);

        /// <summary>
        /// Create a new existence chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Create a new Proof of Existence chain using the provided existence settings</param>
        /// <returns>ApiResponse of CreateChainResponse</returns>
        ApiResponse<CreateChainResponse> CreateChainWithHttpInfo (CreateChainRequest request);
        /// <summary>
        /// Register content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content will be registered</param>
        /// <param name="existence">Register content using the current existence settings</param>
        /// <returns>RegisterContentResponse</returns>
        RegisterContentResponse RegisterContent (string chainId, ContentRequest existence);

        /// <summary>
        /// Register content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content will be registered</param>
        /// <param name="existence">Register content using the current existence settings</param>
        /// <returns>ApiResponse of RegisterContentResponse</returns>
        ApiResponse<RegisterContentResponse> RegisterContentWithHttpInfo (string chainId, ContentRequest existence);
        /// <summary>
        /// Register content using a bytestream/file
        /// </summary>
        /// <remarks>
        /// Register content by supplying a file or some other binary data. Hashing will be done on the server side
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content will be registered</param>
        /// <param name="stream">The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored</param>
        /// <param name="settings">settings (optional)</param>
        /// <returns>RegisterContentResponse</returns>
        RegisterContentResponse RegisterStream (string chainId, System.IO.Stream stream, System.IO.Stream settings = null);

        /// <summary>
        /// Register content using a bytestream/file
        /// </summary>
        /// <remarks>
        /// Register content by supplying a file or some other binary data. Hashing will be done on the server side
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content will be registered</param>
        /// <param name="stream">The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored</param>
        /// <param name="settings">settings (optional)</param>
        /// <returns>ApiResponse of RegisterContentResponse</returns>
        ApiResponse<RegisterContentResponse> RegisterStreamWithHttpInfo (string chainId, System.IO.Stream stream, System.IO.Stream settings = null);
        /// <summary>
        /// Verify content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content was registered</param>
        /// <param name="existence">Verify content using the current existence settings</param>
        /// <returns>VerifyContentResponse</returns>
        VerifyContentResponse VerifyContent (string chainId, ContentRequest existence);

        /// <summary>
        /// Verify content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content was registered</param>
        /// <param name="existence">Verify content using the current existence settings</param>
        /// <returns>ApiResponse of VerifyContentResponse</returns>
        ApiResponse<VerifyContentResponse> VerifyContentWithHttpInfo (string chainId, ContentRequest existence);
        /// <summary>
        /// Verify content by hash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content was registered</param>
        /// <param name="hash">The client generated hash</param>
        /// <param name="existence">Verify content using the current existence settings (optional)</param>
        /// <returns>VerifyContentResponse</returns>
        VerifyContentResponse VerifyContentByHash (string chainId, string hash, ContentRequest existence = null);

        /// <summary>
        /// Verify content by hash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content was registered</param>
        /// <param name="hash">The client generated hash</param>
        /// <param name="existence">Verify content using the current existence settings (optional)</param>
        /// <returns>ApiResponse of VerifyContentResponse</returns>
        ApiResponse<VerifyContentResponse> VerifyContentByHashWithHttpInfo (string chainId, string hash, ContentRequest existence = null);
        /// <summary>
        /// Verify content using a bytestream/file
        /// </summary>
        /// <remarks>
        /// Register content by supplying a file or some other binary data. Hashing will be done on the server side
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content will be registered</param>
        /// <param name="stream">The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored</param>
        /// <param name="settings">settings (optional)</param>
        /// <returns>VerifyContentResponse</returns>
        VerifyContentResponse VerifyStream (string chainId, System.IO.Stream stream, System.IO.Stream settings = null);

        /// <summary>
        /// Verify content using a bytestream/file
        /// </summary>
        /// <remarks>
        /// Register content by supplying a file or some other binary data. Hashing will be done on the server side
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content will be registered</param>
        /// <param name="stream">The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored</param>
        /// <param name="settings">settings (optional)</param>
        /// <returns>ApiResponse of VerifyContentResponse</returns>
        ApiResponse<VerifyContentResponse> VerifyStreamWithHttpInfo (string chainId, System.IO.Stream stream, System.IO.Stream settings = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new existence chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Create a new Proof of Existence chain using the provided existence settings</param>
        /// <returns>Task of CreateChainResponse</returns>
        System.Threading.Tasks.Task<CreateChainResponse> CreateChainAsync (CreateChainRequest request);

        /// <summary>
        /// Create a new existence chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Create a new Proof of Existence chain using the provided existence settings</param>
        /// <returns>Task of ApiResponse (CreateChainResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateChainResponse>> CreateChainAsyncWithHttpInfo (CreateChainRequest request);
        /// <summary>
        /// Register content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content will be registered</param>
        /// <param name="existence">Register content using the current existence settings</param>
        /// <returns>Task of RegisterContentResponse</returns>
        System.Threading.Tasks.Task<RegisterContentResponse> RegisterContentAsync (string chainId, ContentRequest existence);

        /// <summary>
        /// Register content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content will be registered</param>
        /// <param name="existence">Register content using the current existence settings</param>
        /// <returns>Task of ApiResponse (RegisterContentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegisterContentResponse>> RegisterContentAsyncWithHttpInfo (string chainId, ContentRequest existence);
        /// <summary>
        /// Register content using a bytestream/file
        /// </summary>
        /// <remarks>
        /// Register content by supplying a file or some other binary data. Hashing will be done on the server side
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content will be registered</param>
        /// <param name="stream">The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored</param>
        /// <param name="settings">settings (optional)</param>
        /// <returns>Task of RegisterContentResponse</returns>
        System.Threading.Tasks.Task<RegisterContentResponse> RegisterStreamAsync (string chainId, System.IO.Stream stream, System.IO.Stream settings = null);

        /// <summary>
        /// Register content using a bytestream/file
        /// </summary>
        /// <remarks>
        /// Register content by supplying a file or some other binary data. Hashing will be done on the server side
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content will be registered</param>
        /// <param name="stream">The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored</param>
        /// <param name="settings">settings (optional)</param>
        /// <returns>Task of ApiResponse (RegisterContentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegisterContentResponse>> RegisterStreamAsyncWithHttpInfo (string chainId, System.IO.Stream stream, System.IO.Stream settings = null);
        /// <summary>
        /// Verify content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content was registered</param>
        /// <param name="existence">Verify content using the current existence settings</param>
        /// <returns>Task of VerifyContentResponse</returns>
        System.Threading.Tasks.Task<VerifyContentResponse> VerifyContentAsync (string chainId, ContentRequest existence);

        /// <summary>
        /// Verify content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content was registered</param>
        /// <param name="existence">Verify content using the current existence settings</param>
        /// <returns>Task of ApiResponse (VerifyContentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerifyContentResponse>> VerifyContentAsyncWithHttpInfo (string chainId, ContentRequest existence);
        /// <summary>
        /// Verify content by hash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content was registered</param>
        /// <param name="hash">The client generated hash</param>
        /// <param name="existence">Verify content using the current existence settings (optional)</param>
        /// <returns>Task of VerifyContentResponse</returns>
        System.Threading.Tasks.Task<VerifyContentResponse> VerifyContentByHashAsync (string chainId, string hash, ContentRequest existence = null);

        /// <summary>
        /// Verify content by hash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content was registered</param>
        /// <param name="hash">The client generated hash</param>
        /// <param name="existence">Verify content using the current existence settings (optional)</param>
        /// <returns>Task of ApiResponse (VerifyContentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerifyContentResponse>> VerifyContentByHashAsyncWithHttpInfo (string chainId, string hash, ContentRequest existence = null);
        /// <summary>
        /// Verify content using a bytestream/file
        /// </summary>
        /// <remarks>
        /// Register content by supplying a file or some other binary data. Hashing will be done on the server side
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content will be registered</param>
        /// <param name="stream">The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored</param>
        /// <param name="settings">settings (optional)</param>
        /// <returns>Task of VerifyContentResponse</returns>
        System.Threading.Tasks.Task<VerifyContentResponse> VerifyStreamAsync (string chainId, System.IO.Stream stream, System.IO.Stream settings = null);

        /// <summary>
        /// Verify content using a bytestream/file
        /// </summary>
        /// <remarks>
        /// Register content by supplying a file or some other binary data. Hashing will be done on the server side
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content will be registered</param>
        /// <param name="stream">The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored</param>
        /// <param name="settings">settings (optional)</param>
        /// <returns>Task of ApiResponse (VerifyContentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerifyContentResponse>> VerifyStreamAsyncWithHttpInfo (string chainId, System.IO.Stream stream, System.IO.Stream settings = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProofOfExistenceApi : IProofOfExistenceApi
    {
        private Sphereon.SDK.Blockchain.Proof.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProofOfExistenceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProofOfExistenceApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Sphereon.SDK.Blockchain.Proof.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProofOfExistenceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProofOfExistenceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Sphereon.SDK.Blockchain.Proof.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sphereon.SDK.Blockchain.Proof.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new existence chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Create a new Proof of Existence chain using the provided existence settings</param>
        /// <returns>CreateChainResponse</returns>
        public CreateChainResponse CreateChain (CreateChainRequest request)
        {
             ApiResponse<CreateChainResponse> localVarResponse = CreateChainWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new existence chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Create a new Proof of Existence chain using the provided existence settings</param>
        /// <returns>ApiResponse of CreateChainResponse</returns>
        public ApiResponse< CreateChainResponse > CreateChainWithHttpInfo (CreateChainRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling ProofOfExistenceApi->CreateChain");

            var localVarPath = "/blockchain/proof/0.1.0/existence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateChain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateChainResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateChainResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateChainResponse)));
            
        }

        /// <summary>
        /// Create a new existence chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Create a new Proof of Existence chain using the provided existence settings</param>
        /// <returns>Task of CreateChainResponse</returns>
        public async System.Threading.Tasks.Task<CreateChainResponse> CreateChainAsync (CreateChainRequest request)
        {
             ApiResponse<CreateChainResponse> localVarResponse = await CreateChainAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new existence chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Create a new Proof of Existence chain using the provided existence settings</param>
        /// <returns>Task of ApiResponse (CreateChainResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateChainResponse>> CreateChainAsyncWithHttpInfo (CreateChainRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling ProofOfExistenceApi->CreateChain");

            var localVarPath = "/blockchain/proof/0.1.0/existence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateChain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateChainResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateChainResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateChainResponse)));
            
        }

        /// <summary>
        /// Register content 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content will be registered</param>
        /// <param name="existence">Register content using the current existence settings</param>
        /// <returns>RegisterContentResponse</returns>
        public RegisterContentResponse RegisterContent (string chainId, ContentRequest existence)
        {
             ApiResponse<RegisterContentResponse> localVarResponse = RegisterContentWithHttpInfo(chainId, existence);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Register content 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content will be registered</param>
        /// <param name="existence">Register content using the current existence settings</param>
        /// <returns>ApiResponse of RegisterContentResponse</returns>
        public ApiResponse< RegisterContentResponse > RegisterContentWithHttpInfo (string chainId, ContentRequest existence)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling ProofOfExistenceApi->RegisterContent");
            // verify the required parameter 'existence' is set
            if (existence == null)
                throw new ApiException(400, "Missing required parameter 'existence' when calling ProofOfExistenceApi->RegisterContent");

            var localVarPath = "/blockchain/proof/0.1.0/existence/{chainId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (existence != null && existence.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(existence); // http body (model) parameter
            }
            else
            {
                localVarPostBody = existence; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegisterContentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegisterContentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegisterContentResponse)));
            
        }

        /// <summary>
        /// Register content 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content will be registered</param>
        /// <param name="existence">Register content using the current existence settings</param>
        /// <returns>Task of RegisterContentResponse</returns>
        public async System.Threading.Tasks.Task<RegisterContentResponse> RegisterContentAsync (string chainId, ContentRequest existence)
        {
             ApiResponse<RegisterContentResponse> localVarResponse = await RegisterContentAsyncWithHttpInfo(chainId, existence);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Register content 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content will be registered</param>
        /// <param name="existence">Register content using the current existence settings</param>
        /// <returns>Task of ApiResponse (RegisterContentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RegisterContentResponse>> RegisterContentAsyncWithHttpInfo (string chainId, ContentRequest existence)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling ProofOfExistenceApi->RegisterContent");
            // verify the required parameter 'existence' is set
            if (existence == null)
                throw new ApiException(400, "Missing required parameter 'existence' when calling ProofOfExistenceApi->RegisterContent");

            var localVarPath = "/blockchain/proof/0.1.0/existence/{chainId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (existence != null && existence.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(existence); // http body (model) parameter
            }
            else
            {
                localVarPostBody = existence; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegisterContentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegisterContentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegisterContentResponse)));
            
        }

        /// <summary>
        /// Register content using a bytestream/file Register content by supplying a file or some other binary data. Hashing will be done on the server side
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content will be registered</param>
        /// <param name="stream">The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored</param>
        /// <param name="settings">settings (optional)</param>
        /// <returns>RegisterContentResponse</returns>
        public RegisterContentResponse RegisterStream (string chainId, System.IO.Stream stream, System.IO.Stream settings = null)
        {
             ApiResponse<RegisterContentResponse> localVarResponse = RegisterStreamWithHttpInfo(chainId, stream, settings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Register content using a bytestream/file Register content by supplying a file or some other binary data. Hashing will be done on the server side
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content will be registered</param>
        /// <param name="stream">The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored</param>
        /// <param name="settings">settings (optional)</param>
        /// <returns>ApiResponse of RegisterContentResponse</returns>
        public ApiResponse< RegisterContentResponse > RegisterStreamWithHttpInfo (string chainId, System.IO.Stream stream, System.IO.Stream settings = null)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling ProofOfExistenceApi->RegisterStream");
            // verify the required parameter 'stream' is set
            if (stream == null)
                throw new ApiException(400, "Missing required parameter 'stream' when calling ProofOfExistenceApi->RegisterStream");

            var localVarPath = "/blockchain/proof/0.1.0/existence/{chainId}/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (settings != null) localVarFileParams.Add("settings", Configuration.ApiClient.ParameterToFile("settings", settings));
            if (stream != null) localVarFileParams.Add("stream", Configuration.ApiClient.ParameterToFile("stream", stream));

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegisterContentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegisterContentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegisterContentResponse)));
            
        }

        /// <summary>
        /// Register content using a bytestream/file Register content by supplying a file or some other binary data. Hashing will be done on the server side
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content will be registered</param>
        /// <param name="stream">The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored</param>
        /// <param name="settings">settings (optional)</param>
        /// <returns>Task of RegisterContentResponse</returns>
        public async System.Threading.Tasks.Task<RegisterContentResponse> RegisterStreamAsync (string chainId, System.IO.Stream stream, System.IO.Stream settings = null)
        {
             ApiResponse<RegisterContentResponse> localVarResponse = await RegisterStreamAsyncWithHttpInfo(chainId, stream, settings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Register content using a bytestream/file Register content by supplying a file or some other binary data. Hashing will be done on the server side
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content will be registered</param>
        /// <param name="stream">The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored</param>
        /// <param name="settings">settings (optional)</param>
        /// <returns>Task of ApiResponse (RegisterContentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RegisterContentResponse>> RegisterStreamAsyncWithHttpInfo (string chainId, System.IO.Stream stream, System.IO.Stream settings = null)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling ProofOfExistenceApi->RegisterStream");
            // verify the required parameter 'stream' is set
            if (stream == null)
                throw new ApiException(400, "Missing required parameter 'stream' when calling ProofOfExistenceApi->RegisterStream");

            var localVarPath = "/blockchain/proof/0.1.0/existence/{chainId}/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (settings != null) localVarFileParams.Add("settings", Configuration.ApiClient.ParameterToFile("settings", settings));
            if (stream != null) localVarFileParams.Add("stream", Configuration.ApiClient.ParameterToFile("stream", stream));

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegisterContentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegisterContentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegisterContentResponse)));
            
        }

        /// <summary>
        /// Verify content 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content was registered</param>
        /// <param name="existence">Verify content using the current existence settings</param>
        /// <returns>VerifyContentResponse</returns>
        public VerifyContentResponse VerifyContent (string chainId, ContentRequest existence)
        {
             ApiResponse<VerifyContentResponse> localVarResponse = VerifyContentWithHttpInfo(chainId, existence);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verify content 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content was registered</param>
        /// <param name="existence">Verify content using the current existence settings</param>
        /// <returns>ApiResponse of VerifyContentResponse</returns>
        public ApiResponse< VerifyContentResponse > VerifyContentWithHttpInfo (string chainId, ContentRequest existence)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling ProofOfExistenceApi->VerifyContent");
            // verify the required parameter 'existence' is set
            if (existence == null)
                throw new ApiException(400, "Missing required parameter 'existence' when calling ProofOfExistenceApi->VerifyContent");

            var localVarPath = "/blockchain/proof/0.1.0/existence/{chainId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (existence != null && existence.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(existence); // http body (model) parameter
            }
            else
            {
                localVarPostBody = existence; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerifyContentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerifyContentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerifyContentResponse)));
            
        }

        /// <summary>
        /// Verify content 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content was registered</param>
        /// <param name="existence">Verify content using the current existence settings</param>
        /// <returns>Task of VerifyContentResponse</returns>
        public async System.Threading.Tasks.Task<VerifyContentResponse> VerifyContentAsync (string chainId, ContentRequest existence)
        {
             ApiResponse<VerifyContentResponse> localVarResponse = await VerifyContentAsyncWithHttpInfo(chainId, existence);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verify content 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content was registered</param>
        /// <param name="existence">Verify content using the current existence settings</param>
        /// <returns>Task of ApiResponse (VerifyContentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerifyContentResponse>> VerifyContentAsyncWithHttpInfo (string chainId, ContentRequest existence)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling ProofOfExistenceApi->VerifyContent");
            // verify the required parameter 'existence' is set
            if (existence == null)
                throw new ApiException(400, "Missing required parameter 'existence' when calling ProofOfExistenceApi->VerifyContent");

            var localVarPath = "/blockchain/proof/0.1.0/existence/{chainId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (existence != null && existence.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(existence); // http body (model) parameter
            }
            else
            {
                localVarPostBody = existence; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerifyContentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerifyContentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerifyContentResponse)));
            
        }

        /// <summary>
        /// Verify content by hash 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content was registered</param>
        /// <param name="hash">The client generated hash</param>
        /// <param name="existence">Verify content using the current existence settings (optional)</param>
        /// <returns>VerifyContentResponse</returns>
        public VerifyContentResponse VerifyContentByHash (string chainId, string hash, ContentRequest existence = null)
        {
             ApiResponse<VerifyContentResponse> localVarResponse = VerifyContentByHashWithHttpInfo(chainId, hash, existence);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verify content by hash 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content was registered</param>
        /// <param name="hash">The client generated hash</param>
        /// <param name="existence">Verify content using the current existence settings (optional)</param>
        /// <returns>ApiResponse of VerifyContentResponse</returns>
        public ApiResponse< VerifyContentResponse > VerifyContentByHashWithHttpInfo (string chainId, string hash, ContentRequest existence = null)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling ProofOfExistenceApi->VerifyContentByHash");
            // verify the required parameter 'hash' is set
            if (hash == null)
                throw new ApiException(400, "Missing required parameter 'hash' when calling ProofOfExistenceApi->VerifyContentByHash");

            var localVarPath = "/blockchain/proof/0.1.0/existence/{chainId}/{hash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (hash != null) localVarPathParams.Add("hash", Configuration.ApiClient.ParameterToString(hash)); // path parameter
            if (existence != null && existence.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(existence); // http body (model) parameter
            }
            else
            {
                localVarPostBody = existence; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyContentByHash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerifyContentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerifyContentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerifyContentResponse)));
            
        }

        /// <summary>
        /// Verify content by hash 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content was registered</param>
        /// <param name="hash">The client generated hash</param>
        /// <param name="existence">Verify content using the current existence settings (optional)</param>
        /// <returns>Task of VerifyContentResponse</returns>
        public async System.Threading.Tasks.Task<VerifyContentResponse> VerifyContentByHashAsync (string chainId, string hash, ContentRequest existence = null)
        {
             ApiResponse<VerifyContentResponse> localVarResponse = await VerifyContentByHashAsyncWithHttpInfo(chainId, hash, existence);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verify content by hash 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content was registered</param>
        /// <param name="hash">The client generated hash</param>
        /// <param name="existence">Verify content using the current existence settings (optional)</param>
        /// <returns>Task of ApiResponse (VerifyContentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerifyContentResponse>> VerifyContentByHashAsyncWithHttpInfo (string chainId, string hash, ContentRequest existence = null)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling ProofOfExistenceApi->VerifyContentByHash");
            // verify the required parameter 'hash' is set
            if (hash == null)
                throw new ApiException(400, "Missing required parameter 'hash' when calling ProofOfExistenceApi->VerifyContentByHash");

            var localVarPath = "/blockchain/proof/0.1.0/existence/{chainId}/{hash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (hash != null) localVarPathParams.Add("hash", Configuration.ApiClient.ParameterToString(hash)); // path parameter
            if (existence != null && existence.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(existence); // http body (model) parameter
            }
            else
            {
                localVarPostBody = existence; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyContentByHash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerifyContentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerifyContentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerifyContentResponse)));
            
        }

        /// <summary>
        /// Verify content using a bytestream/file Register content by supplying a file or some other binary data. Hashing will be done on the server side
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content will be registered</param>
        /// <param name="stream">The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored</param>
        /// <param name="settings">settings (optional)</param>
        /// <returns>VerifyContentResponse</returns>
        public VerifyContentResponse VerifyStream (string chainId, System.IO.Stream stream, System.IO.Stream settings = null)
        {
             ApiResponse<VerifyContentResponse> localVarResponse = VerifyStreamWithHttpInfo(chainId, stream, settings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verify content using a bytestream/file Register content by supplying a file or some other binary data. Hashing will be done on the server side
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content will be registered</param>
        /// <param name="stream">The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored</param>
        /// <param name="settings">settings (optional)</param>
        /// <returns>ApiResponse of VerifyContentResponse</returns>
        public ApiResponse< VerifyContentResponse > VerifyStreamWithHttpInfo (string chainId, System.IO.Stream stream, System.IO.Stream settings = null)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling ProofOfExistenceApi->VerifyStream");
            // verify the required parameter 'stream' is set
            if (stream == null)
                throw new ApiException(400, "Missing required parameter 'stream' when calling ProofOfExistenceApi->VerifyStream");

            var localVarPath = "/blockchain/proof/0.1.0/existence/{chainId}/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (settings != null) localVarFileParams.Add("settings", Configuration.ApiClient.ParameterToFile("settings", settings));
            if (stream != null) localVarFileParams.Add("stream", Configuration.ApiClient.ParameterToFile("stream", stream));

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerifyContentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerifyContentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerifyContentResponse)));
            
        }

        /// <summary>
        /// Verify content using a bytestream/file Register content by supplying a file or some other binary data. Hashing will be done on the server side
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content will be registered</param>
        /// <param name="stream">The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored</param>
        /// <param name="settings">settings (optional)</param>
        /// <returns>Task of VerifyContentResponse</returns>
        public async System.Threading.Tasks.Task<VerifyContentResponse> VerifyStreamAsync (string chainId, System.IO.Stream stream, System.IO.Stream settings = null)
        {
             ApiResponse<VerifyContentResponse> localVarResponse = await VerifyStreamAsyncWithHttpInfo(chainId, stream, settings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verify content using a bytestream/file Register content by supplying a file or some other binary data. Hashing will be done on the server side
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Proof.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">The chain where the content will be registered</param>
        /// <param name="stream">The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored</param>
        /// <param name="settings">settings (optional)</param>
        /// <returns>Task of ApiResponse (VerifyContentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerifyContentResponse>> VerifyStreamAsyncWithHttpInfo (string chainId, System.IO.Stream stream, System.IO.Stream settings = null)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling ProofOfExistenceApi->VerifyStream");
            // verify the required parameter 'stream' is set
            if (stream == null)
                throw new ApiException(400, "Missing required parameter 'stream' when calling ProofOfExistenceApi->VerifyStream");

            var localVarPath = "/blockchain/proof/0.1.0/existence/{chainId}/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (settings != null) localVarFileParams.Add("settings", Configuration.ApiClient.ParameterToFile("settings", settings));
            if (stream != null) localVarFileParams.Add("stream", Configuration.ApiClient.ParameterToFile("stream", stream));

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerifyContentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VerifyContentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerifyContentResponse)));
            
        }

    }
}
