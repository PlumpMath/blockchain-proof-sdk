/* 
 * Blockchain Proof
 *
 * With the Blockchain Proof API it is easy to prove or disprove existence of data at a certain point in time. Behind the scenes it stores entries using the Factom (bitcoin), Multichain or Ethereum blockchain by means of our generic blockchain API.    The flow is generally as follows:  1. Make sure a configuration is present  2. Register content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing  3. Verify content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing. You will get back whether the content has been registered previously or not    Full API Documentation: https://docs.sphereon.com/api/blockchain-proof/0.9/html  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 0.9
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Sphereon.SDK.Blockchain.Proof.Client.SwaggerDateConverter;

namespace Sphereon.SDK.Blockchain.Proof.Model
{
    /// <summary>
    /// Create a context configuration
    /// </summary>
    [DataContract]
    public partial class CreateConfigurationRequest :  IEquatable<CreateConfigurationRequest>, IValidatableObject
    {
        /// <summary>
        /// The access mode for this configuration. Public means accessible to other tenants of the API as well. Currently public is only allowed for Sphereon itself
        /// </summary>
        /// <value>The access mode for this configuration. Public means accessible to other tenants of the API as well. Currently public is only allowed for Sphereon itself</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccessModeEnum
        {
            
            /// <summary>
            /// Enum PUBLIC for "PUBLIC"
            /// </summary>
            [EnumMember(Value = "PUBLIC")]
            PUBLIC,
            
            /// <summary>
            /// Enum PRIVATE for "PRIVATE"
            /// </summary>
            [EnumMember(Value = "PRIVATE")]
            PRIVATE
        }

        /// <summary>
        /// The access mode for this configuration. Public means accessible to other tenants of the API as well. Currently public is only allowed for Sphereon itself
        /// </summary>
        /// <value>The access mode for this configuration. Public means accessible to other tenants of the API as well. Currently public is only allowed for Sphereon itself</value>
        [DataMember(Name="accessMode", EmitDefaultValue=false)]
        public AccessModeEnum? AccessMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateConfigurationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateConfigurationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateConfigurationRequest" /> class.
        /// </summary>
        /// <param name="InitialSettings">The initial context settings. (required).</param>
        /// <param name="Context">The Easy Blockchain API context. (required).</param>
        /// <param name="Name">The configuration name. (required).</param>
        /// <param name="AccessMode">The access mode for this configuration. Public means accessible to other tenants of the API as well. Currently public is only allowed for Sphereon itself (required).</param>
        public CreateConfigurationRequest(ChainSettings InitialSettings = default(ChainSettings), string Context = default(string), string Name = default(string), AccessModeEnum? AccessMode = default(AccessModeEnum?))
        {
            // to ensure "InitialSettings" is required (not null)
            if (InitialSettings == null)
            {
                throw new InvalidDataException("InitialSettings is a required property for CreateConfigurationRequest and cannot be null");
            }
            else
            {
                this.InitialSettings = InitialSettings;
            }
            // to ensure "Context" is required (not null)
            if (Context == null)
            {
                throw new InvalidDataException("Context is a required property for CreateConfigurationRequest and cannot be null");
            }
            else
            {
                this.Context = Context;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for CreateConfigurationRequest and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "AccessMode" is required (not null)
            if (AccessMode == null)
            {
                throw new InvalidDataException("AccessMode is a required property for CreateConfigurationRequest and cannot be null");
            }
            else
            {
                this.AccessMode = AccessMode;
            }
        }
        
        /// <summary>
        /// The initial context settings.
        /// </summary>
        /// <value>The initial context settings.</value>
        [DataMember(Name="initialSettings", EmitDefaultValue=false)]
        public ChainSettings InitialSettings { get; set; }

        /// <summary>
        /// The Easy Blockchain API context.
        /// </summary>
        /// <value>The Easy Blockchain API context.</value>
        [DataMember(Name="context", EmitDefaultValue=false)]
        public string Context { get; set; }

        /// <summary>
        /// The configuration name.
        /// </summary>
        /// <value>The configuration name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateConfigurationRequest {\n");
            sb.Append("  InitialSettings: ").Append(InitialSettings).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AccessMode: ").Append(AccessMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateConfigurationRequest);
        }

        /// <summary>
        /// Returns true if CreateConfigurationRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateConfigurationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateConfigurationRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.InitialSettings == other.InitialSettings ||
                    this.InitialSettings != null &&
                    this.InitialSettings.Equals(other.InitialSettings)
                ) && 
                (
                    this.Context == other.Context ||
                    this.Context != null &&
                    this.Context.Equals(other.Context)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.AccessMode == other.AccessMode ||
                    this.AccessMode != null &&
                    this.AccessMode.Equals(other.AccessMode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.InitialSettings != null)
                    hash = hash * 59 + this.InitialSettings.GetHashCode();
                if (this.Context != null)
                    hash = hash * 59 + this.Context.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.AccessMode != null)
                    hash = hash * 59 + this.AccessMode.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
