/**
 * @fileoverview AUTOMATICALLY GENERATED service for api.ChainApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * &lt;b&gt;With the Blockchain Proof API it is easy to prove existence of (binary) data at a certain point in time. Behind the scenes it stores entries using the Factom (bitcoin) blockchain by means of our generic blockchain API.&lt;/b&gt;    The flow is generally as follows:  1. Make sure a Proof chain has been created using the /chain POST endpoint beforehand. Normally you only need one or a handful of chains, during the entiry lifetime of your proof solution. This is a relative expensive operation in terms of money.  2. Store proof entries on the proof chain from step 1. The entries will contain the content and metadata you want to store forever on the specified chain.  3. Retrieve an existing entry from the chain to verify or retrieve data      &lt;b&gt;Interactive testing: &lt;/b&gt;A web based test console is available in the &lt;a href&#x3D;\&quot;https://store.sphereon.com\&quot;&gt;Sphereon API Store&lt;/a&gt;
 * Version: 0.1.0
 * Generated at: 2016-11-10T02:37:37.168+01:00
 * Generated by: class io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license Apache License Version 2.0
 * http://www.apache.org/licenses/LICENSE-2.0
 */

goog.provide('api.ChainApi');

goog.require('model.CreateChainRequest');
goog.require('model.CreateChainResponse');
goog.require('model.VndErrors');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
api.ChainApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('ChainApiBasePath') ?
                   /** @type {!string} */ ($injector.get('ChainApiBasePath')) :
                   'https://gw.api.cloud.sphereon.com/';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('ChainApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('ChainApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
api.ChainApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Create a new existence chain
 * 
 * @param {!CreateChainRequest} request Create a new Proof of Existence chain using the provided existence settings
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!api.CreateChainResponse>}
 */
api.ChainApi.prototype.createChain = function(request, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blockchain/proof/0.1.0/existence';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'request' is set
  if (!request) {
    throw new Error('Missing required parameter request when calling createChain');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: request,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
