/**
 * Sphereon :: BLOCKCHAIN :: PROOF API
 * <b>The Blockchain Proof API is an easy to prove existence of (binary) data at a certain point in time. Behinde the scenes it stores entries using the Factom (bitcoin) blockchain by means of our generic blockchain API.</b>    The flow is generally as follows:  1. Make sure a Proof chain has been created using the /chain POST endpoint beforehand. Normally you only need one or a handful of chains, during the entiry lifetime of your proof solution. This is a relative expensive operation in terms of money.  2. Store proof entries on the proof chain from step 1. The entries will contain the content and metadata you want to store forever on the specified chain.  3. Retrieve an existing entry from the chain to verify or retrieve data      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.sphereon.sdk.blockchain.proof.api;

import com.sphereon.sdk.blockchain.proof.handler.ApiCallback;
import com.sphereon.sdk.blockchain.proof.handler.ApiClient;
import com.sphereon.sdk.blockchain.proof.handler.ApiException;
import com.sphereon.sdk.blockchain.proof.handler.ApiResponse;
import com.sphereon.sdk.blockchain.proof.handler.Configuration;
import com.sphereon.sdk.blockchain.proof.handler.Pair;
import com.sphereon.sdk.blockchain.proof.handler.ProgressRequestBody;
import com.sphereon.sdk.blockchain.proof.handler.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.sphereon.sdk.blockchain.proof.model.CreateChainRequest;
import com.sphereon.sdk.blockchain.proof.model.CreateChainResponse;
import com.sphereon.sdk.blockchain.proof.model.VndErrors;
import com.sphereon.sdk.blockchain.proof.model.ContentRequest;
import com.sphereon.sdk.blockchain.proof.model.RegisterContentResponse;
import java.io.File;
import com.sphereon.sdk.blockchain.proof.model.VerifyContentResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProofOfExistenceApi {
    private ApiClient apiClient;

    public ProofOfExistenceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProofOfExistenceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createChain */
    private com.squareup.okhttp.Call createChainCall(CreateChainRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling createChain(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/blockchain/proof/0.1.0/existence".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a new existence chain
     * 
     * @param request Create a new Proof of Existence chain using the provided existence settings (required)
     * @return CreateChainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateChainResponse createChain(CreateChainRequest request) throws ApiException {
        ApiResponse<CreateChainResponse> resp = createChainWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Create a new existence chain
     * 
     * @param request Create a new Proof of Existence chain using the provided existence settings (required)
     * @return ApiResponse&lt;CreateChainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateChainResponse> createChainWithHttpInfo(CreateChainRequest request) throws ApiException {
        com.squareup.okhttp.Call call = createChainCall(request, null, null);
        Type localVarReturnType = new TypeToken<CreateChainResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new existence chain (asynchronously)
     * 
     * @param request Create a new Proof of Existence chain using the provided existence settings (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createChainAsync(CreateChainRequest request, final ApiCallback<CreateChainResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createChainCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateChainResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for registerContent */
    private com.squareup.okhttp.Call registerContentCall(String chainId, ContentRequest existence, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = existence;
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling registerContent(Async)");
        }
        
        // verify the required parameter 'existence' is set
        if (existence == null) {
            throw new ApiException("Missing the required parameter 'existence' when calling registerContent(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/blockchain/proof/0.1.0/existence/{chainId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Register content
     * 
     * @param chainId The chain where the content will be registered (required)
     * @param existence Register content using the current existence settings (required)
     * @return RegisterContentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RegisterContentResponse registerContent(String chainId, ContentRequest existence) throws ApiException {
        ApiResponse<RegisterContentResponse> resp = registerContentWithHttpInfo(chainId, existence);
        return resp.getData();
    }

    /**
     * Register content
     * 
     * @param chainId The chain where the content will be registered (required)
     * @param existence Register content using the current existence settings (required)
     * @return ApiResponse&lt;RegisterContentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RegisterContentResponse> registerContentWithHttpInfo(String chainId, ContentRequest existence) throws ApiException {
        com.squareup.okhttp.Call call = registerContentCall(chainId, existence, null, null);
        Type localVarReturnType = new TypeToken<RegisterContentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Register content (asynchronously)
     * 
     * @param chainId The chain where the content will be registered (required)
     * @param existence Register content using the current existence settings (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registerContentAsync(String chainId, ContentRequest existence, final ApiCallback<RegisterContentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registerContentCall(chainId, existence, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RegisterContentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for registerStream */
    private com.squareup.okhttp.Call registerStreamCall(String chainId, File stream, File settings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling registerStream(Async)");
        }
        
        // verify the required parameter 'stream' is set
        if (stream == null) {
            throw new ApiException("Missing the required parameter 'stream' when calling registerStream(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/blockchain/proof/0.1.0/existence/{chainId}/stream".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (settings != null)
        localVarFormParams.put("settings", settings);
        if (stream != null)
        localVarFormParams.put("stream", stream);

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Register content using a bytestream/file
     * Register content by supplying a file or some other binary data. Hashing will be done on the server side
     * @param chainId The chain where the content will be registered (required)
     * @param stream The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored (required)
     * @param settings settings (optional)
     * @return RegisterContentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RegisterContentResponse registerStream(String chainId, File stream, File settings) throws ApiException {
        ApiResponse<RegisterContentResponse> resp = registerStreamWithHttpInfo(chainId, stream, settings);
        return resp.getData();
    }

    /**
     * Register content using a bytestream/file
     * Register content by supplying a file or some other binary data. Hashing will be done on the server side
     * @param chainId The chain where the content will be registered (required)
     * @param stream The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored (required)
     * @param settings settings (optional)
     * @return ApiResponse&lt;RegisterContentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RegisterContentResponse> registerStreamWithHttpInfo(String chainId, File stream, File settings) throws ApiException {
        com.squareup.okhttp.Call call = registerStreamCall(chainId, stream, settings, null, null);
        Type localVarReturnType = new TypeToken<RegisterContentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Register content using a bytestream/file (asynchronously)
     * Register content by supplying a file or some other binary data. Hashing will be done on the server side
     * @param chainId The chain where the content will be registered (required)
     * @param stream The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored (required)
     * @param settings settings (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registerStreamAsync(String chainId, File stream, File settings, final ApiCallback<RegisterContentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registerStreamCall(chainId, stream, settings, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RegisterContentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for verifyContent */
    private com.squareup.okhttp.Call verifyContentCall(String chainId, ContentRequest existence, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = existence;
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling verifyContent(Async)");
        }
        
        // verify the required parameter 'existence' is set
        if (existence == null) {
            throw new ApiException("Missing the required parameter 'existence' when calling verifyContent(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/blockchain/proof/0.1.0/existence/{chainId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Verify content
     * 
     * @param chainId The chain where the content was registered (required)
     * @param existence Verify content using the current existence settings (required)
     * @return VerifyContentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerifyContentResponse verifyContent(String chainId, ContentRequest existence) throws ApiException {
        ApiResponse<VerifyContentResponse> resp = verifyContentWithHttpInfo(chainId, existence);
        return resp.getData();
    }

    /**
     * Verify content
     * 
     * @param chainId The chain where the content was registered (required)
     * @param existence Verify content using the current existence settings (required)
     * @return ApiResponse&lt;VerifyContentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerifyContentResponse> verifyContentWithHttpInfo(String chainId, ContentRequest existence) throws ApiException {
        com.squareup.okhttp.Call call = verifyContentCall(chainId, existence, null, null);
        Type localVarReturnType = new TypeToken<VerifyContentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Verify content (asynchronously)
     * 
     * @param chainId The chain where the content was registered (required)
     * @param existence Verify content using the current existence settings (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call verifyContentAsync(String chainId, ContentRequest existence, final ApiCallback<VerifyContentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = verifyContentCall(chainId, existence, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerifyContentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for verifyContentByHash */
    private com.squareup.okhttp.Call verifyContentByHashCall(String chainId, String hash, ContentRequest existence, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = existence;
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling verifyContentByHash(Async)");
        }
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling verifyContentByHash(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/blockchain/proof/0.1.0/existence/{chainId}/{hash}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()))
        .replaceAll("\\{" + "hash" + "\\}", apiClient.escapeString(hash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Verify content by hash
     * 
     * @param chainId The chain where the content was registered (required)
     * @param hash The client generated hash (required)
     * @param existence Verify content using the current existence settings (optional)
     * @return VerifyContentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerifyContentResponse verifyContentByHash(String chainId, String hash, ContentRequest existence) throws ApiException {
        ApiResponse<VerifyContentResponse> resp = verifyContentByHashWithHttpInfo(chainId, hash, existence);
        return resp.getData();
    }

    /**
     * Verify content by hash
     * 
     * @param chainId The chain where the content was registered (required)
     * @param hash The client generated hash (required)
     * @param existence Verify content using the current existence settings (optional)
     * @return ApiResponse&lt;VerifyContentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerifyContentResponse> verifyContentByHashWithHttpInfo(String chainId, String hash, ContentRequest existence) throws ApiException {
        com.squareup.okhttp.Call call = verifyContentByHashCall(chainId, hash, existence, null, null);
        Type localVarReturnType = new TypeToken<VerifyContentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Verify content by hash (asynchronously)
     * 
     * @param chainId The chain where the content was registered (required)
     * @param hash The client generated hash (required)
     * @param existence Verify content using the current existence settings (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call verifyContentByHashAsync(String chainId, String hash, ContentRequest existence, final ApiCallback<VerifyContentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = verifyContentByHashCall(chainId, hash, existence, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerifyContentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for verifyStream */
    private com.squareup.okhttp.Call verifyStreamCall(String chainId, File stream, File settings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling verifyStream(Async)");
        }
        
        // verify the required parameter 'stream' is set
        if (stream == null) {
            throw new ApiException("Missing the required parameter 'stream' when calling verifyStream(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/blockchain/proof/0.1.0/existence/{chainId}/stream".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (settings != null)
        localVarFormParams.put("settings", settings);
        if (stream != null)
        localVarFormParams.put("stream", stream);

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Verify content using a bytestream/file
     * Register content by supplying a file or some other binary data. Hashing will be done on the server side
     * @param chainId The chain where the content will be registered (required)
     * @param stream The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored (required)
     * @param settings settings (optional)
     * @return VerifyContentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerifyContentResponse verifyStream(String chainId, File stream, File settings) throws ApiException {
        ApiResponse<VerifyContentResponse> resp = verifyStreamWithHttpInfo(chainId, stream, settings);
        return resp.getData();
    }

    /**
     * Verify content using a bytestream/file
     * Register content by supplying a file or some other binary data. Hashing will be done on the server side
     * @param chainId The chain where the content will be registered (required)
     * @param stream The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored (required)
     * @param settings settings (optional)
     * @return ApiResponse&lt;VerifyContentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerifyContentResponse> verifyStreamWithHttpInfo(String chainId, File stream, File settings) throws ApiException {
        com.squareup.okhttp.Call call = verifyStreamCall(chainId, stream, settings, null, null);
        Type localVarReturnType = new TypeToken<VerifyContentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Verify content using a bytestream/file (asynchronously)
     * Register content by supplying a file or some other binary data. Hashing will be done on the server side
     * @param chainId The chain where the content will be registered (required)
     * @param stream The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored (required)
     * @param settings settings (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call verifyStreamAsync(String chainId, File stream, File settings, final ApiCallback<VerifyContentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = verifyStreamCall(chainId, stream, settings, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerifyContentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
