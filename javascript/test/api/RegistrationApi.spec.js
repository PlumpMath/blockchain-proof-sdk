/**
 * Blockchain Proof
 * With the Blockchain Proof API it is easy to prove or disprove existence of data at a certain point in time. Behind the scenes it stores entries using the Factom (bitcoin), Multichain or Ethereum blockchain by means of our generic blockchain API.    The flow is generally as follows:  1. Make sure a configuration is present  2. Register content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing  3. Verify content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing. You will get back whether the content has been registered previously or not    Full API Documentation: https://docs.sphereon.com/api/blockchain-proof/0.9/html  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 0.9
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD.
        define(['expect.js', '../../src/SphereonSDKBlockchainProof/index'], factory);
    } else if (typeof module === 'object' && module.exports) {
        // CommonJS-like environments that support module.exports, like Node.
        factory(require('expect.js'), require('../../src/SphereonSDKBlockchainProof/index'));
    } else {
        // Browser globals (root is window)
        factory(root.expect, root.BlockchainProof);
    }
}(this, function (expect, BlockchainProof) {
    'use strict';

    var TEST_CONFIG_BASENAME = "sphereoncstest";
    var TEST_CONTEXT_MULTICHAIN = "multichain";
    var CONNECTION_TIMEOUT = 40000;
    var ACCESS_TOKEN = "6534f740-a99a-3bde-9046-287de103baf9";

    var module = require('module');
    var assert = require('assert');

    var unitTestConfigName;
    var hashingSecret = new Buffer("SphereonTestSecret", "utf-8").toString('base64');

    var configurationApi;
    var registrationApi;
    var verificationApi;

    var settingsChainId;
    var proofChainId;


    before(function () {
        configurationApi = new BlockchainProof.ConfigurationApi();
        registrationApi = new BlockchainProof.RegistrationApi();
        verificationApi = new BlockchainProof.VerificationApi();
        unitTestConfigName = TEST_CONFIG_BASENAME + (new Date).getTime();

        var defaultClient = BlockchainProof.ApiClient.instance;
        var oauth2schema = defaultClient.authentications['oauth2schema'];
        oauth2schema.accessToken = ACCESS_TOKEN;
    });

    var getProperty = function (object, getter, property) {
        // Use getter method if present; otherwise, get the property directly.
        if (typeof object[getter] === 'function')
            return object[getter]();
        else
            return object[property];
    }

    var setProperty = function (object, setter, property, value) {
        // Use setter method if present; otherwise, set the property directly.
        if (typeof object[setter] === 'function')
            object[setter](value);
        else
            object[property] = value;
    }

    describe('RegistrationApi', function () {

        describe('createProofAndSettingsChain', function () {
            it('should call createProofAndSettingsChain successfully', function (done) {
                var settings = new BlockchainProof.ChainSettings();
                settings.version = BlockchainProof.ChainSettings.VersionEnum["1"];
                settings.secret = hashingSecret;
                settings.hashAlgorithm = BlockchainProof.ChainSettings.HashAlgorithmEnum["256"];
                settings.contentRegistrationChainTypes = [
                    BlockchainProof.ChainSettings.ContentRegistrationChainTypesEnum.PER_HASH_PROOF_CHAIN,
                    BlockchainProof.ChainSettings.ContentRegistrationChainTypesEnum.SINGLE_PROOF_CHAIN
                ];

                var createConfiguration = new BlockchainProof.CreateConfigurationRequest();
                createConfiguration.name = unitTestConfigName;
                createConfiguration.initialSettings = settings;
                createConfiguration.context = TEST_CONTEXT_MULTICHAIN;
                createConfiguration.accessMode = BlockchainProof.CreateConfigurationRequest.AccessModeEnum.PRIVATE;
                var test = configurationApi.createConfiguration(createConfiguration, (error, configurationResponse, response) => {
                        if (error) throw error + ": " + response.text;
                        assert(configurationResponse);
                        var storedSettings = configurationResponse.storedSettings;
                        assert(storedSettings);
                        assert(storedSettings.context);
                        assert(storedSettings.chainSettings);
                        assert(storedSettings.singleProofChain);
                        assert(storedSettings.settingsChain);
                        assert(storedSettings.chainConfiguration);
                        assert(storedSettings.chainSettings.singleProofChain);
                        assert(storedSettings.chainSettings.hashAlgorithm);
                        settingsChainId = storedSettings.settingsChain.chainId;
                        proofChainId = storedSettings.singleProofChain.chainId;
                        expect().to.be();
                        done();
                    }
                );
            });
        });

        describe('registerUsingContent', function () {
            it('should call registerUsingContent successfully', function (done) {
//                registrationApi.registerUsingContent(function (error) {
//                    if (error) throw error;
//                    expect().to.be();
//                });
                done();
            });
        });
        describe('registerUsingLocation', function () {
            it('should call registerUsingLocation successfully', function (done) {
                //uncomment below and update the code to test registerUsingLocation
                //instance.registerUsingLocation(function(error) {
                //  if (error) throw error;
                //expect().to.be();
                //});
                done();
            });
        });
        describe('registerUsingStream', function () {
            it('should call registerUsingStream successfully', function (done) {
                //uncomment below and update the code to test registerUsingStream
                //instance.registerUsingStream(function(error) {
                //  if (error) throw error;
                //expect().to.be();
                //});
                done();
            });
        });
    });

}));
