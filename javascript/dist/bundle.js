(function(modules, cache, entry) {
  req(entry);
  function req(name) {
    if (cache[name]) return cache[name].exports;
    var m = cache[name] = {exports: {}};
    modules[name][0].call(m.exports, modRequire, m, m.exports, window);
    return m.exports;
    function modRequire(alias) {
      var id = modules[name][1][alias];
      if (!id) throw new Error("Cannot find module " + alias);
      return req(id);
    }
  }
})({0: [function(require,module,exports,global){
/**
 * Blockchain Proof
 * <b>The Blockchain Proof API is an easy to prove existence of (binary) data at a certain point in time. Behinde the scenes it stores entries using the Factom (bitcoin) blockchain by means of our generic blockchain API.</b>    The flow is generally as follows:  1. Make sure a Proof chain has been created using the /chain POST endpoint beforehand. Normally you only need one or a handful of chains, during the entiry lifetime of your proof solution. This is a relative expensive operation in terms of money.  2. Store proof entries on the proof chain from step 1. The entries will contain the content and metadata you want to store forever on the specified chain.  3. Retrieve an existing entry from the chain to verify or retrieve data      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSDKBlockchainProof/ApiClient', 'SphereonSDKBlockchainProof/model/CommittedChain', 'SphereonSDKBlockchainProof/model/ContentRequest', 'SphereonSDKBlockchainProof/model/CreateChainRequest', 'SphereonSDKBlockchainProof/model/CreateChainResponse', 'SphereonSDKBlockchainProof/model/Link', 'SphereonSDKBlockchainProof/model/RegisterContentResponse', 'SphereonSDKBlockchainProof/model/Settings', 'SphereonSDKBlockchainProof/model/VerifyContentResponse', 'SphereonSDKBlockchainProof/model/VndError', 'SphereonSDKBlockchainProof/model/VndErrors', 'SphereonSDKBlockchainProof/api/ProofOfExistenceApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/CommittedChain'), require('./model/ContentRequest'), require('./model/CreateChainRequest'), require('./model/CreateChainResponse'), require('./model/Link'), require('./model/RegisterContentResponse'), require('./model/Settings'), require('./model/VerifyContentResponse'), require('./model/VndError'), require('./model/VndErrors'), require('./api/ProofOfExistenceApi'));
  }
}(function(ApiClient, CommittedChain, ContentRequest, CreateChainRequest, CreateChainResponse, Link, RegisterContentResponse, Settings, VerifyContentResponse, VndError, VndErrors, ProofOfExistenceApi) {
  'use strict';

  /**
   * bThe_Blockchain_Proof_API_is_an_easy_to_prove_existence_of__binary_data_at_a_certain_point_in_time__Behinde_the_scenes_it_stores_entries_using_the_Factom__bitcoin_blockchain_by_means_of_our_generic_blockchain_API_bThe_flow_is_generally_as_follows1__Make_sure_a_Proof_chain_has_been_created_using_the_chain_POST_endpoint_beforehand__Normally_you_only_need_one_or_a_handful_of_chains_during_the_entiry_lifetime_of_your_proof_solution__This_is_a_relative_expensive_operation_in_terms_of_money_2__Store_proof_entries_on_the_proof_chain_from_step_1__The_entries_will_contain_the_content_and_metadata_you_want_to_store_forever_on_the_specified_chain_3__Retrieve_an_existing_entry_from_the_chain_to_verify_or_retrieve_databInteractive_testing_bA_web_based_test_console_is_available_in_the_a_hrefhttpsstore_sphereon_comSphereon_API_Storea.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var BlockchainProof = require('SphereonSDKBlockchainProof/index'); // See note below*.
   * var xxxSvc = new BlockchainProof.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new BlockchainProof.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['SphereonSDKBlockchainProof/index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new BlockchainProof.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new BlockchainProof.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module SphereonSDKBlockchainProof/index
   * @version 0.1.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:SphereonSDKBlockchainProof/ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The CommittedChain model constructor.
     * @property {module:SphereonSDKBlockchainProof/model/CommittedChain}
     */
    CommittedChain: CommittedChain,
    /**
     * The ContentRequest model constructor.
     * @property {module:SphereonSDKBlockchainProof/model/ContentRequest}
     */
    ContentRequest: ContentRequest,
    /**
     * The CreateChainRequest model constructor.
     * @property {module:SphereonSDKBlockchainProof/model/CreateChainRequest}
     */
    CreateChainRequest: CreateChainRequest,
    /**
     * The CreateChainResponse model constructor.
     * @property {module:SphereonSDKBlockchainProof/model/CreateChainResponse}
     */
    CreateChainResponse: CreateChainResponse,
    /**
     * The Link model constructor.
     * @property {module:SphereonSDKBlockchainProof/model/Link}
     */
    Link: Link,
    /**
     * The RegisterContentResponse model constructor.
     * @property {module:SphereonSDKBlockchainProof/model/RegisterContentResponse}
     */
    RegisterContentResponse: RegisterContentResponse,
    /**
     * The Settings model constructor.
     * @property {module:SphereonSDKBlockchainProof/model/Settings}
     */
    Settings: Settings,
    /**
     * The VerifyContentResponse model constructor.
     * @property {module:SphereonSDKBlockchainProof/model/VerifyContentResponse}
     */
    VerifyContentResponse: VerifyContentResponse,
    /**
     * The VndError model constructor.
     * @property {module:SphereonSDKBlockchainProof/model/VndError}
     */
    VndError: VndError,
    /**
     * The VndErrors model constructor.
     * @property {module:SphereonSDKBlockchainProof/model/VndErrors}
     */
    VndErrors: VndErrors,
    /**
     * The ProofOfExistenceApi service constructor.
     * @property {module:SphereonSDKBlockchainProof/api/ProofOfExistenceApi}
     */
    ProofOfExistenceApi: ProofOfExistenceApi
  };

  return exports;
}));

}, {"./model/CommittedChain":1,"./model/ContentRequest":2,"./model/CreateChainRequest":3,"./model/CreateChainResponse":4,"./model/Link":5,"./model/RegisterContentResponse":6,"./model/Settings":7,"./model/VerifyContentResponse":8,"./model/VndError":9,"./model/VndErrors":10,"./api/ProofOfExistenceApi":11}],1: [function(require,module,exports,global){
/**
 * Blockchain Proof
 * <b>The Blockchain Proof API is an easy to prove existence of (binary) data at a certain point in time. Behinde the scenes it stores entries using the Factom (bitcoin) blockchain by means of our generic blockchain API.</b>    The flow is generally as follows:  1. Make sure a Proof chain has been created using the /chain POST endpoint beforehand. Normally you only need one or a handful of chains, during the entiry lifetime of your proof solution. This is a relative expensive operation in terms of money.  2. Store proof entries on the proof chain from step 1. The entries will contain the content and metadata you want to store forever on the specified chain.  3. Retrieve an existing entry from the chain to verify or retrieve data      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSDKBlockchainProof/ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.BlockchainProof) {
      root.BlockchainProof = {};
    }
    root.BlockchainProof.CommittedChain = factory(root.BlockchainProof.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The CommittedChain model module.
   * @module SphereonSDKBlockchainProof/model/CommittedChain
   * @version 0.1.0
   */

  /**
   * Constructs a new <code>CommittedChain</code>.
   * Commited Chain
   * @alias module:SphereonSDKBlockchainProof/model/CommittedChain
   * @class
   */
  var exports = function() {
    var _this = this;


  };

  /**
   * Constructs a <code>CommittedChain</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:SphereonSDKBlockchainProof/model/CommittedChain} obj Optional instance to populate.
   * @return {module:SphereonSDKBlockchainProof/model/CommittedChain} The populated <code>CommittedChain</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
    }
    return obj;
  }

  /**
   * Chain ID
   * @member {String} id
   */
  exports.prototype['id'] = undefined;



  return exports;
}));



}, {}],2: [function(require,module,exports,global){
/**
 * Blockchain Proof
 * <b>The Blockchain Proof API is an easy to prove existence of (binary) data at a certain point in time. Behinde the scenes it stores entries using the Factom (bitcoin) blockchain by means of our generic blockchain API.</b>    The flow is generally as follows:  1. Make sure a Proof chain has been created using the /chain POST endpoint beforehand. Normally you only need one or a handful of chains, during the entiry lifetime of your proof solution. This is a relative expensive operation in terms of money.  2. Store proof entries on the proof chain from step 1. The entries will contain the content and metadata you want to store forever on the specified chain.  3. Retrieve an existing entry from the chain to verify or retrieve data      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSDKBlockchainProof/ApiClient', 'SphereonSDKBlockchainProof/model/Settings'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Settings'));
  } else {
    // Browser globals (root is window)
    if (!root.BlockchainProof) {
      root.BlockchainProof = {};
    }
    root.BlockchainProof.ContentRequest = factory(root.BlockchainProof.ApiClient, root.BlockchainProof.Settings);
  }
}(this, function(ApiClient, Settings) {
  'use strict';




  /**
   * The ContentRequest model module.
   * @module SphereonSDKBlockchainProof/model/ContentRequest
   * @version 0.1.0
   */

  /**
   * Constructs a new <code>ContentRequest</code>.
   * Content existence request
   * @alias module:SphereonSDKBlockchainProof/model/ContentRequest
   * @class
   * @param hashProvider {module:SphereonSDKBlockchainProof/model/ContentRequest.HashProviderEnum} When CLIENT is supplied the content should already have been hashed by you. When SERVER is supplied we will hash the content according to the supplied settings
   * @param content {String} The content to register.
   */
  var exports = function(hashProvider, content) {
    var _this = this;


    _this['hashProvider'] = hashProvider;
    _this['content'] = content;
  };

  /**
   * Constructs a <code>ContentRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:SphereonSDKBlockchainProof/model/ContentRequest} obj Optional instance to populate.
   * @return {module:SphereonSDKBlockchainProof/model/ContentRequest} The populated <code>ContentRequest</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('settings')) {
        obj['settings'] = Settings.constructFromObject(data['settings']);
      }
      if (data.hasOwnProperty('hashProvider')) {
        obj['hashProvider'] = ApiClient.convertToType(data['hashProvider'], 'String');
      }
      if (data.hasOwnProperty('content')) {
        obj['content'] = ApiClient.convertToType(data['content'], 'String');
      }
    }
    return obj;
  }

  /**
   * @member {module:SphereonSDKBlockchainProof/model/Settings} settings
   */
  exports.prototype['settings'] = undefined;
  /**
   * When CLIENT is supplied the content should already have been hashed by you. When SERVER is supplied we will hash the content according to the supplied settings
   * @member {module:SphereonSDKBlockchainProof/model/ContentRequest.HashProviderEnum} hashProvider
   */
  exports.prototype['hashProvider'] = undefined;
  /**
   * The content to register.
   * @member {String} content
   */
  exports.prototype['content'] = undefined;


  /**
   * Allowed values for the <code>hashProvider</code> property.
   * @enum {String}
   * @readonly
   */
  exports.HashProviderEnum = {
    /**
     * value: "SERVER"
     * @const
     */
    "SERVER": "SERVER",
    /**
     * value: "CLIENT"
     * @const
     */
    "CLIENT": "CLIENT"  };


  return exports;
}));



}, {"./Settings":7}],3: [function(require,module,exports,global){
/**
 * Blockchain Proof
 * <b>The Blockchain Proof API is an easy to prove existence of (binary) data at a certain point in time. Behinde the scenes it stores entries using the Factom (bitcoin) blockchain by means of our generic blockchain API.</b>    The flow is generally as follows:  1. Make sure a Proof chain has been created using the /chain POST endpoint beforehand. Normally you only need one or a handful of chains, during the entiry lifetime of your proof solution. This is a relative expensive operation in terms of money.  2. Store proof entries on the proof chain from step 1. The entries will contain the content and metadata you want to store forever on the specified chain.  3. Retrieve an existing entry from the chain to verify or retrieve data      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSDKBlockchainProof/ApiClient', 'SphereonSDKBlockchainProof/model/Settings'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Settings'));
  } else {
    // Browser globals (root is window)
    if (!root.BlockchainProof) {
      root.BlockchainProof = {};
    }
    root.BlockchainProof.CreateChainRequest = factory(root.BlockchainProof.ApiClient, root.BlockchainProof.Settings);
  }
}(this, function(ApiClient, Settings) {
  'use strict';




  /**
   * The CreateChainRequest model module.
   * @module SphereonSDKBlockchainProof/model/CreateChainRequest
   * @version 0.1.0
   */

  /**
   * Constructs a new <code>CreateChainRequest</code>.
   * Create chain for Proof of Existence request
   * @alias module:SphereonSDKBlockchainProof/model/CreateChainRequest
   * @class
   * @param name {String} Unique name for this chain.
   * @param defaultSettings {module:SphereonSDKBlockchainProof/model/Settings} 
   */
  var exports = function(name, defaultSettings) {
    var _this = this;


    _this['name'] = name;
    _this['defaultSettings'] = defaultSettings;
  };

  /**
   * Constructs a <code>CreateChainRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:SphereonSDKBlockchainProof/model/CreateChainRequest} obj Optional instance to populate.
   * @return {module:SphereonSDKBlockchainProof/model/CreateChainRequest} The populated <code>CreateChainRequest</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('metadata')) {
        obj['metadata'] = ApiClient.convertToType(data['metadata'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('defaultSettings')) {
        obj['defaultSettings'] = Settings.constructFromObject(data['defaultSettings']);
      }
    }
    return obj;
  }

  /**
   * Metadata for this chain.
   * @member {String} metadata
   */
  exports.prototype['metadata'] = undefined;
  /**
   * Unique name for this chain.
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * @member {module:SphereonSDKBlockchainProof/model/Settings} defaultSettings
   */
  exports.prototype['defaultSettings'] = undefined;



  return exports;
}));



}, {"./Settings":7}],4: [function(require,module,exports,global){
/**
 * Blockchain Proof
 * <b>The Blockchain Proof API is an easy to prove existence of (binary) data at a certain point in time. Behinde the scenes it stores entries using the Factom (bitcoin) blockchain by means of our generic blockchain API.</b>    The flow is generally as follows:  1. Make sure a Proof chain has been created using the /chain POST endpoint beforehand. Normally you only need one or a handful of chains, during the entiry lifetime of your proof solution. This is a relative expensive operation in terms of money.  2. Store proof entries on the proof chain from step 1. The entries will contain the content and metadata you want to store forever on the specified chain.  3. Retrieve an existing entry from the chain to verify or retrieve data      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSDKBlockchainProof/ApiClient', 'SphereonSDKBlockchainProof/model/CommittedChain', 'SphereonSDKBlockchainProof/model/CreateChainRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./CommittedChain'), require('./CreateChainRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.BlockchainProof) {
      root.BlockchainProof = {};
    }
    root.BlockchainProof.CreateChainResponse = factory(root.BlockchainProof.ApiClient, root.BlockchainProof.CommittedChain, root.BlockchainProof.CreateChainRequest);
  }
}(this, function(ApiClient, CommittedChain, CreateChainRequest) {
  'use strict';




  /**
   * The CreateChainResponse model module.
   * @module SphereonSDKBlockchainProof/model/CreateChainResponse
   * @version 0.1.0
   */

  /**
   * Constructs a new <code>CreateChainResponse</code>.
   * Committed Chain response
   * @alias module:SphereonSDKBlockchainProof/model/CreateChainResponse
   * @class
   * @param settingsChain {module:SphereonSDKBlockchainProof/model/CommittedChain} 
   * @param chainRequest {module:SphereonSDKBlockchainProof/model/CreateChainRequest} 
   * @param proofChain {module:SphereonSDKBlockchainProof/model/CommittedChain} 
   */
  var exports = function(settingsChain, chainRequest, proofChain) {
    var _this = this;

    _this['settingsChain'] = settingsChain;
    _this['chainRequest'] = chainRequest;
    _this['proofChain'] = proofChain;
  };

  /**
   * Constructs a <code>CreateChainResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:SphereonSDKBlockchainProof/model/CreateChainResponse} obj Optional instance to populate.
   * @return {module:SphereonSDKBlockchainProof/model/CreateChainResponse} The populated <code>CreateChainResponse</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('settingsChain')) {
        obj['settingsChain'] = CommittedChain.constructFromObject(data['settingsChain']);
      }
      if (data.hasOwnProperty('chainRequest')) {
        obj['chainRequest'] = CreateChainRequest.constructFromObject(data['chainRequest']);
      }
      if (data.hasOwnProperty('proofChain')) {
        obj['proofChain'] = CommittedChain.constructFromObject(data['proofChain']);
      }
    }
    return obj;
  }

  /**
   * @member {module:SphereonSDKBlockchainProof/model/CommittedChain} settingsChain
   */
  exports.prototype['settingsChain'] = undefined;
  /**
   * @member {module:SphereonSDKBlockchainProof/model/CreateChainRequest} chainRequest
   */
  exports.prototype['chainRequest'] = undefined;
  /**
   * @member {module:SphereonSDKBlockchainProof/model/CommittedChain} proofChain
   */
  exports.prototype['proofChain'] = undefined;



  return exports;
}));



}, {"./CommittedChain":1,"./CreateChainRequest":3}],5: [function(require,module,exports,global){
/**
 * Blockchain Proof
 * <b>The Blockchain Proof API is an easy to prove existence of (binary) data at a certain point in time. Behinde the scenes it stores entries using the Factom (bitcoin) blockchain by means of our generic blockchain API.</b>    The flow is generally as follows:  1. Make sure a Proof chain has been created using the /chain POST endpoint beforehand. Normally you only need one or a handful of chains, during the entiry lifetime of your proof solution. This is a relative expensive operation in terms of money.  2. Store proof entries on the proof chain from step 1. The entries will contain the content and metadata you want to store forever on the specified chain.  3. Retrieve an existing entry from the chain to verify or retrieve data      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSDKBlockchainProof/ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.BlockchainProof) {
      root.BlockchainProof = {};
    }
    root.BlockchainProof.Link = factory(root.BlockchainProof.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Link model module.
   * @module SphereonSDKBlockchainProof/model/Link
   * @version 0.1.0
   */

  /**
   * Constructs a new <code>Link</code>.
   * @alias module:SphereonSDKBlockchainProof/model/Link
   * @class
   */
  var exports = function() {
    var _this = this;


  };

  /**
   * Constructs a <code>Link</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:SphereonSDKBlockchainProof/model/Link} obj Optional instance to populate.
   * @return {module:SphereonSDKBlockchainProof/model/Link} The populated <code>Link</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('href')) {
        obj['href'] = ApiClient.convertToType(data['href'], 'String');
      }
    }
    return obj;
  }

  /**
   * @member {String} href
   */
  exports.prototype['href'] = undefined;



  return exports;
}));



}, {}],6: [function(require,module,exports,global){
/**
 * Blockchain Proof
 * <b>The Blockchain Proof API is an easy to prove existence of (binary) data at a certain point in time. Behinde the scenes it stores entries using the Factom (bitcoin) blockchain by means of our generic blockchain API.</b>    The flow is generally as follows:  1. Make sure a Proof chain has been created using the /chain POST endpoint beforehand. Normally you only need one or a handful of chains, during the entiry lifetime of your proof solution. This is a relative expensive operation in terms of money.  2. Store proof entries on the proof chain from step 1. The entries will contain the content and metadata you want to store forever on the specified chain.  3. Retrieve an existing entry from the chain to verify or retrieve data      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSDKBlockchainProof/ApiClient', 'SphereonSDKBlockchainProof/model/CommittedChain', 'SphereonSDKBlockchainProof/model/ContentRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./CommittedChain'), require('./ContentRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.BlockchainProof) {
      root.BlockchainProof = {};
    }
    root.BlockchainProof.RegisterContentResponse = factory(root.BlockchainProof.ApiClient, root.BlockchainProof.CommittedChain, root.BlockchainProof.ContentRequest);
  }
}(this, function(ApiClient, CommittedChain, ContentRequest) {
  'use strict';




  /**
   * The RegisterContentResponse model module.
   * @module SphereonSDKBlockchainProof/model/RegisterContentResponse
   * @version 0.1.0
   */

  /**
   * Constructs a new <code>RegisterContentResponse</code>.
   * Committed Content response
   * @alias module:SphereonSDKBlockchainProof/model/RegisterContentResponse
   * @class
   * @param contentRequest {module:SphereonSDKBlockchainProof/model/ContentRequest} 
   * @param proofChain {module:SphereonSDKBlockchainProof/model/CommittedChain} 
   * @param registrationState {module:SphereonSDKBlockchainProof/model/RegisterContentResponse.RegistrationStateEnum} 
   */
  var exports = function(contentRequest, proofChain, registrationState) {
    var _this = this;

    _this['contentRequest'] = contentRequest;
    _this['proofChain'] = proofChain;
    _this['registrationState'] = registrationState;
  };

  /**
   * Constructs a <code>RegisterContentResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:SphereonSDKBlockchainProof/model/RegisterContentResponse} obj Optional instance to populate.
   * @return {module:SphereonSDKBlockchainProof/model/RegisterContentResponse} The populated <code>RegisterContentResponse</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('contentRequest')) {
        obj['contentRequest'] = ContentRequest.constructFromObject(data['contentRequest']);
      }
      if (data.hasOwnProperty('proofChain')) {
        obj['proofChain'] = CommittedChain.constructFromObject(data['proofChain']);
      }
      if (data.hasOwnProperty('registrationState')) {
        obj['registrationState'] = ApiClient.convertToType(data['registrationState'], 'String');
      }
    }
    return obj;
  }

  /**
   * @member {module:SphereonSDKBlockchainProof/model/ContentRequest} contentRequest
   */
  exports.prototype['contentRequest'] = undefined;
  /**
   * @member {module:SphereonSDKBlockchainProof/model/CommittedChain} proofChain
   */
  exports.prototype['proofChain'] = undefined;
  /**
   * @member {module:SphereonSDKBlockchainProof/model/RegisterContentResponse.RegistrationStateEnum} registrationState
   */
  exports.prototype['registrationState'] = undefined;


  /**
   * Allowed values for the <code>registrationState</code> property.
   * @enum {String}
   * @readonly
   */
  exports.RegistrationStateEnum = {
    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",
    /**
     * value: "REGISTERED"
     * @const
     */
    "REGISTERED": "REGISTERED",
    /**
     * value: "NOT_REGISTERED"
     * @const
     */
    "NOT_REGISTERED": "NOT_REGISTERED"  };


  return exports;
}));



}, {"./CommittedChain":1,"./ContentRequest":2}],7: [function(require,module,exports,global){
/**
 * Blockchain Proof
 * <b>The Blockchain Proof API is an easy to prove existence of (binary) data at a certain point in time. Behinde the scenes it stores entries using the Factom (bitcoin) blockchain by means of our generic blockchain API.</b>    The flow is generally as follows:  1. Make sure a Proof chain has been created using the /chain POST endpoint beforehand. Normally you only need one or a handful of chains, during the entiry lifetime of your proof solution. This is a relative expensive operation in terms of money.  2. Store proof entries on the proof chain from step 1. The entries will contain the content and metadata you want to store forever on the specified chain.  3. Retrieve an existing entry from the chain to verify or retrieve data      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSDKBlockchainProof/ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.BlockchainProof) {
      root.BlockchainProof = {};
    }
    root.BlockchainProof.Settings = factory(root.BlockchainProof.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Settings model module.
   * @module SphereonSDKBlockchainProof/model/Settings
   * @version 0.1.0
   */

  /**
   * Constructs a new <code>Settings</code>.
   * Existence Settings
   * @alias module:SphereonSDKBlockchainProof/model/Settings
   * @class
   * @param includeContentSize {Boolean} Include the content size in the hash calculation.
   * @param version {String} The settings version (only 1 for now)
   */
  var exports = function(includeContentSize, version) {
    var _this = this;

    _this['includeContentSize'] = includeContentSize;
    _this['version'] = version;

  };

  /**
   * Constructs a <code>Settings</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:SphereonSDKBlockchainProof/model/Settings} obj Optional instance to populate.
   * @return {module:SphereonSDKBlockchainProof/model/Settings} The populated <code>Settings</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('includeContentSize')) {
        obj['includeContentSize'] = ApiClient.convertToType(data['includeContentSize'], 'Boolean');
      }
      if (data.hasOwnProperty('version')) {
        obj['version'] = ApiClient.convertToType(data['version'], 'String');
      }
      if (data.hasOwnProperty('hashAlgorithm')) {
        obj['hashAlgorithm'] = ApiClient.convertToType(data['hashAlgorithm'], 'String');
      }
    }
    return obj;
  }

  /**
   * Include the content size in the hash calculation.
   * @member {Boolean} includeContentSize
   */
  exports.prototype['includeContentSize'] = undefined;
  /**
   * The settings version (only 1 for now)
   * @member {String} version
   */
  exports.prototype['version'] = undefined;
  /**
   * The hashing method used (CLIENT) or to use (SERVER) for the content
   * @member {module:SphereonSDKBlockchainProof/model/Settings.HashAlgorithmEnum} hashAlgorithm
   */
  exports.prototype['hashAlgorithm'] = undefined;


  /**
   * Allowed values for the <code>hashAlgorithm</code> property.
   * @enum {String}
   * @readonly
   */
  exports.HashAlgorithmEnum = {
    /**
     * value: "PLAIN"
     * @const
     */
    "PLAIN": "PLAIN",
    /**
     * value: "SHA_256"
     * @const
     */
    "SHA_256": "SHA_256",
    /**
     * value: "SHA_512"
     * @const
     */
    "SHA_512": "SHA_512"  };


  return exports;
}));



}, {}],8: [function(require,module,exports,global){
/**
 * Blockchain Proof
 * <b>The Blockchain Proof API is an easy to prove existence of (binary) data at a certain point in time. Behinde the scenes it stores entries using the Factom (bitcoin) blockchain by means of our generic blockchain API.</b>    The flow is generally as follows:  1. Make sure a Proof chain has been created using the /chain POST endpoint beforehand. Normally you only need one or a handful of chains, during the entiry lifetime of your proof solution. This is a relative expensive operation in terms of money.  2. Store proof entries on the proof chain from step 1. The entries will contain the content and metadata you want to store forever on the specified chain.  3. Retrieve an existing entry from the chain to verify or retrieve data      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSDKBlockchainProof/ApiClient', 'SphereonSDKBlockchainProof/model/CommittedChain', 'SphereonSDKBlockchainProof/model/ContentRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./CommittedChain'), require('./ContentRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.BlockchainProof) {
      root.BlockchainProof = {};
    }
    root.BlockchainProof.VerifyContentResponse = factory(root.BlockchainProof.ApiClient, root.BlockchainProof.CommittedChain, root.BlockchainProof.ContentRequest);
  }
}(this, function(ApiClient, CommittedChain, ContentRequest) {
  'use strict';




  /**
   * The VerifyContentResponse model module.
   * @module SphereonSDKBlockchainProof/model/VerifyContentResponse
   * @version 0.1.0
   */

  /**
   * Constructs a new <code>VerifyContentResponse</code>.
   * Verify Content response
   * @alias module:SphereonSDKBlockchainProof/model/VerifyContentResponse
   * @class
   * @param contentRequest {module:SphereonSDKBlockchainProof/model/ContentRequest} 
   * @param proofChain {module:SphereonSDKBlockchainProof/model/CommittedChain} 
   * @param registrationState {module:SphereonSDKBlockchainProof/model/VerifyContentResponse.RegistrationStateEnum} 
   */
  var exports = function(contentRequest, proofChain, registrationState) {
    var _this = this;


    _this['contentRequest'] = contentRequest;
    _this['proofChain'] = proofChain;
    _this['registrationState'] = registrationState;
  };

  /**
   * Constructs a <code>VerifyContentResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:SphereonSDKBlockchainProof/model/VerifyContentResponse} obj Optional instance to populate.
   * @return {module:SphereonSDKBlockchainProof/model/VerifyContentResponse} The populated <code>VerifyContentResponse</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('registrationTime')) {
        obj['registrationTime'] = ApiClient.convertToType(data['registrationTime'], 'Date');
      }
      if (data.hasOwnProperty('contentRequest')) {
        obj['contentRequest'] = ContentRequest.constructFromObject(data['contentRequest']);
      }
      if (data.hasOwnProperty('proofChain')) {
        obj['proofChain'] = CommittedChain.constructFromObject(data['proofChain']);
      }
      if (data.hasOwnProperty('registrationState')) {
        obj['registrationState'] = ApiClient.convertToType(data['registrationState'], 'String');
      }
    }
    return obj;
  }

  /**
   * @member {Date} registrationTime
   */
  exports.prototype['registrationTime'] = undefined;
  /**
   * @member {module:SphereonSDKBlockchainProof/model/ContentRequest} contentRequest
   */
  exports.prototype['contentRequest'] = undefined;
  /**
   * @member {module:SphereonSDKBlockchainProof/model/CommittedChain} proofChain
   */
  exports.prototype['proofChain'] = undefined;
  /**
   * @member {module:SphereonSDKBlockchainProof/model/VerifyContentResponse.RegistrationStateEnum} registrationState
   */
  exports.prototype['registrationState'] = undefined;


  /**
   * Allowed values for the <code>registrationState</code> property.
   * @enum {String}
   * @readonly
   */
  exports.RegistrationStateEnum = {
    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",
    /**
     * value: "REGISTERED"
     * @const
     */
    "REGISTERED": "REGISTERED",
    /**
     * value: "NOT_REGISTERED"
     * @const
     */
    "NOT_REGISTERED": "NOT_REGISTERED"  };


  return exports;
}));



}, {"./CommittedChain":1,"./ContentRequest":2}],9: [function(require,module,exports,global){
/**
 * Blockchain Proof
 * <b>The Blockchain Proof API is an easy to prove existence of (binary) data at a certain point in time. Behinde the scenes it stores entries using the Factom (bitcoin) blockchain by means of our generic blockchain API.</b>    The flow is generally as follows:  1. Make sure a Proof chain has been created using the /chain POST endpoint beforehand. Normally you only need one or a handful of chains, during the entiry lifetime of your proof solution. This is a relative expensive operation in terms of money.  2. Store proof entries on the proof chain from step 1. The entries will contain the content and metadata you want to store forever on the specified chain.  3. Retrieve an existing entry from the chain to verify or retrieve data      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSDKBlockchainProof/ApiClient', 'SphereonSDKBlockchainProof/model/Link'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Link'));
  } else {
    // Browser globals (root is window)
    if (!root.BlockchainProof) {
      root.BlockchainProof = {};
    }
    root.BlockchainProof.VndError = factory(root.BlockchainProof.ApiClient, root.BlockchainProof.Link);
  }
}(this, function(ApiClient, Link) {
  'use strict';




  /**
   * The VndError model module.
   * @module SphereonSDKBlockchainProof/model/VndError
   * @version 0.1.0
   */

  /**
   * Constructs a new <code>VndError</code>.
   * @alias module:SphereonSDKBlockchainProof/model/VndError
   * @class
   */
  var exports = function() {
    var _this = this;




  };

  /**
   * Constructs a <code>VndError</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:SphereonSDKBlockchainProof/model/VndError} obj Optional instance to populate.
   * @return {module:SphereonSDKBlockchainProof/model/VndError} The populated <code>VndError</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('_links')) {
        obj['_links'] = ApiClient.convertToType(data['_links'], {'String': Link});
      }
      if (data.hasOwnProperty('logref')) {
        obj['logref'] = ApiClient.convertToType(data['logref'], 'String');
      }
      if (data.hasOwnProperty('message')) {
        obj['message'] = ApiClient.convertToType(data['message'], 'String');
      }
    }
    return obj;
  }

  /**
   * @member {Object.<String, module:SphereonSDKBlockchainProof/model/Link>} _links
   */
  exports.prototype['_links'] = undefined;
  /**
   * @member {String} logref
   */
  exports.prototype['logref'] = undefined;
  /**
   * @member {String} message
   */
  exports.prototype['message'] = undefined;



  return exports;
}));



}, {"./Link":5}],10: [function(require,module,exports,global){
/**
 * Blockchain Proof
 * <b>The Blockchain Proof API is an easy to prove existence of (binary) data at a certain point in time. Behinde the scenes it stores entries using the Factom (bitcoin) blockchain by means of our generic blockchain API.</b>    The flow is generally as follows:  1. Make sure a Proof chain has been created using the /chain POST endpoint beforehand. Normally you only need one or a handful of chains, during the entiry lifetime of your proof solution. This is a relative expensive operation in terms of money.  2. Store proof entries on the proof chain from step 1. The entries will contain the content and metadata you want to store forever on the specified chain.  3. Retrieve an existing entry from the chain to verify or retrieve data      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSDKBlockchainProof/ApiClient', 'SphereonSDKBlockchainProof/model/VndError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./VndError'));
  } else {
    // Browser globals (root is window)
    if (!root.BlockchainProof) {
      root.BlockchainProof = {};
    }
    root.BlockchainProof.VndErrors = factory(root.BlockchainProof.ApiClient, root.BlockchainProof.VndError);
  }
}(this, function(ApiClient, VndError) {
  'use strict';




  /**
   * The VndErrors model module.
   * @module SphereonSDKBlockchainProof/model/VndErrors
   * @version 0.1.0
   */

  /**
   * Constructs a new <code>VndErrors</code>.
   * The error response
   * @alias module:SphereonSDKBlockchainProof/model/VndErrors
   * @class
   */
  var exports = function() {
    var _this = this;


  };

  /**
   * Constructs a <code>VndErrors</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:SphereonSDKBlockchainProof/model/VndErrors} obj Optional instance to populate.
   * @return {module:SphereonSDKBlockchainProof/model/VndErrors} The populated <code>VndErrors</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('errors')) {
        obj['errors'] = ApiClient.convertToType(data['errors'], [VndError]);
      }
    }
    return obj;
  }

  /**
   * @member {Array.<module:SphereonSDKBlockchainProof/model/VndError>} errors
   */
  exports.prototype['errors'] = undefined;



  return exports;
}));



}, {"./VndError":9}],11: [function(require,module,exports,global){
/**
 * Blockchain Proof
 * <b>The Blockchain Proof API is an easy to prove existence of (binary) data at a certain point in time. Behinde the scenes it stores entries using the Factom (bitcoin) blockchain by means of our generic blockchain API.</b>    The flow is generally as follows:  1. Make sure a Proof chain has been created using the /chain POST endpoint beforehand. Normally you only need one or a handful of chains, during the entiry lifetime of your proof solution. This is a relative expensive operation in terms of money.  2. Store proof entries on the proof chain from step 1. The entries will contain the content and metadata you want to store forever on the specified chain.  3. Retrieve an existing entry from the chain to verify or retrieve data      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSDKBlockchainProof/ApiClient', 'SphereonSDKBlockchainProof/model/CreateChainRequest', 'SphereonSDKBlockchainProof/model/CreateChainResponse', 'SphereonSDKBlockchainProof/model/VndErrors', 'SphereonSDKBlockchainProof/model/ContentRequest', 'SphereonSDKBlockchainProof/model/RegisterContentResponse', 'SphereonSDKBlockchainProof/model/VerifyContentResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateChainRequest'), require('../model/CreateChainResponse'), require('../model/VndErrors'), require('../model/ContentRequest'), require('../model/RegisterContentResponse'), require('../model/VerifyContentResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.BlockchainProof) {
      root.BlockchainProof = {};
    }
    root.BlockchainProof.ProofOfExistenceApi = factory(root.BlockchainProof.ApiClient, root.BlockchainProof.CreateChainRequest, root.BlockchainProof.CreateChainResponse, root.BlockchainProof.VndErrors, root.BlockchainProof.ContentRequest, root.BlockchainProof.RegisterContentResponse, root.BlockchainProof.VerifyContentResponse);
  }
}(this, function(ApiClient, CreateChainRequest, CreateChainResponse, VndErrors, ContentRequest, RegisterContentResponse, VerifyContentResponse) {
  'use strict';

  /**
   * ProofOfExistence service.
   * @module SphereonSDKBlockchainProof/api/ProofOfExistenceApi
   * @version 0.1.0
   */

  /**
   * Constructs a new ProofOfExistenceApi. 
   * @alias module:SphereonSDKBlockchainProof/api/ProofOfExistenceApi
   * @class
   * @param {module:SphereonSDKBlockchainProof/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:SphereonSDKBlockchainProof/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createChain operation.
     * @callback module:SphereonSDKBlockchainProof/api/ProofOfExistenceApi~createChainCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKBlockchainProof/model/CreateChainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new existence chain
     * @param {module:SphereonSDKBlockchainProof/model/CreateChainRequest} request Create a new Proof of Existence chain using the provided existence settings
     * @param {module:SphereonSDKBlockchainProof/api/ProofOfExistenceApi~createChainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKBlockchainProof/model/CreateChainResponse}
     */
    this.createChain = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw "Missing the required parameter 'request' when calling createChain";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = CreateChainResponse;

      return this.apiClient.callApi(
        '/blockchain/proof/0.1.0/existence', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registerContent operation.
     * @callback module:SphereonSDKBlockchainProof/api/ProofOfExistenceApi~registerContentCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKBlockchainProof/model/RegisterContentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register content
     * @param {String} chainId The chain where the content will be registered
     * @param {module:SphereonSDKBlockchainProof/model/ContentRequest} existence Register content using the current existence settings
     * @param {module:SphereonSDKBlockchainProof/api/ProofOfExistenceApi~registerContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKBlockchainProof/model/RegisterContentResponse}
     */
    this.registerContent = function(chainId, existence, callback) {
      var postBody = existence;

      // verify the required parameter 'chainId' is set
      if (chainId == undefined || chainId == null) {
        throw "Missing the required parameter 'chainId' when calling registerContent";
      }

      // verify the required parameter 'existence' is set
      if (existence == undefined || existence == null) {
        throw "Missing the required parameter 'existence' when calling registerContent";
      }


      var pathParams = {
        'chainId': chainId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = RegisterContentResponse;

      return this.apiClient.callApi(
        '/blockchain/proof/0.1.0/existence/{chainId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registerStream operation.
     * @callback module:SphereonSDKBlockchainProof/api/ProofOfExistenceApi~registerStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKBlockchainProof/model/RegisterContentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register content using a bytestream/file
     * Register content by supplying a file or some other binary data. Hashing will be done on the server side
     * @param {String} chainId The chain where the content will be registered
     * @param {File} stream The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored
     * @param {Object} opts Optional parameters
     * @param {File} opts.settings settings
     * @param {module:SphereonSDKBlockchainProof/api/ProofOfExistenceApi~registerStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKBlockchainProof/model/RegisterContentResponse}
     */
    this.registerStream = function(chainId, stream, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'chainId' is set
      if (chainId == undefined || chainId == null) {
        throw "Missing the required parameter 'chainId' when calling registerStream";
      }

      // verify the required parameter 'stream' is set
      if (stream == undefined || stream == null) {
        throw "Missing the required parameter 'stream' when calling registerStream";
      }


      var pathParams = {
        'chainId': chainId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'settings': opts['settings'],
        'stream': stream
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = RegisterContentResponse;

      return this.apiClient.callApi(
        '/blockchain/proof/0.1.0/existence/{chainId}/stream', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyContent operation.
     * @callback module:SphereonSDKBlockchainProof/api/ProofOfExistenceApi~verifyContentCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKBlockchainProof/model/VerifyContentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify content
     * @param {String} chainId The chain where the content was registered
     * @param {module:SphereonSDKBlockchainProof/model/ContentRequest} existence Verify content using the current existence settings
     * @param {module:SphereonSDKBlockchainProof/api/ProofOfExistenceApi~verifyContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKBlockchainProof/model/VerifyContentResponse}
     */
    this.verifyContent = function(chainId, existence, callback) {
      var postBody = existence;

      // verify the required parameter 'chainId' is set
      if (chainId == undefined || chainId == null) {
        throw "Missing the required parameter 'chainId' when calling verifyContent";
      }

      // verify the required parameter 'existence' is set
      if (existence == undefined || existence == null) {
        throw "Missing the required parameter 'existence' when calling verifyContent";
      }


      var pathParams = {
        'chainId': chainId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = VerifyContentResponse;

      return this.apiClient.callApi(
        '/blockchain/proof/0.1.0/existence/{chainId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyContentByHash operation.
     * @callback module:SphereonSDKBlockchainProof/api/ProofOfExistenceApi~verifyContentByHashCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKBlockchainProof/model/VerifyContentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify content by hash
     * @param {String} chainId The chain where the content was registered
     * @param {String} hash The client generated hash
     * @param {Object} opts Optional parameters
     * @param {module:SphereonSDKBlockchainProof/model/ContentRequest} opts.existence Verify content using the current existence settings
     * @param {module:SphereonSDKBlockchainProof/api/ProofOfExistenceApi~verifyContentByHashCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKBlockchainProof/model/VerifyContentResponse}
     */
    this.verifyContentByHash = function(chainId, hash, opts, callback) {
      opts = opts || {};
      var postBody = opts['existence'];

      // verify the required parameter 'chainId' is set
      if (chainId == undefined || chainId == null) {
        throw "Missing the required parameter 'chainId' when calling verifyContentByHash";
      }

      // verify the required parameter 'hash' is set
      if (hash == undefined || hash == null) {
        throw "Missing the required parameter 'hash' when calling verifyContentByHash";
      }


      var pathParams = {
        'chainId': chainId,
        'hash': hash
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = VerifyContentResponse;

      return this.apiClient.callApi(
        '/blockchain/proof/0.1.0/existence/{chainId}/{hash}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyStream operation.
     * @callback module:SphereonSDKBlockchainProof/api/ProofOfExistenceApi~verifyStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKBlockchainProof/model/VerifyContentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify content using a bytestream/file
     * Register content by supplying a file or some other binary data. Hashing will be done on the server side
     * @param {String} chainId The chain where the content will be registered
     * @param {File} stream The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored
     * @param {Object} opts Optional parameters
     * @param {File} opts.settings settings
     * @param {module:SphereonSDKBlockchainProof/api/ProofOfExistenceApi~verifyStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKBlockchainProof/model/VerifyContentResponse}
     */
    this.verifyStream = function(chainId, stream, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'chainId' is set
      if (chainId == undefined || chainId == null) {
        throw "Missing the required parameter 'chainId' when calling verifyStream";
      }

      // verify the required parameter 'stream' is set
      if (stream == undefined || stream == null) {
        throw "Missing the required parameter 'stream' when calling verifyStream";
      }


      var pathParams = {
        'chainId': chainId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'settings': opts['settings'],
        'stream': stream
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = VerifyContentResponse;

      return this.apiClient.callApi(
        '/blockchain/proof/0.1.0/existence/{chainId}/stream', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));

}, {"../model/CreateChainRequest":3,"../model/CreateChainResponse":4,"../model/VndErrors":10,"../model/ContentRequest":2,"../model/VerifyContentResponse":8,"../model/RegisterContentResponse":6}],}, {}, 0);
