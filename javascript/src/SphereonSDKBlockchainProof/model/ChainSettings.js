/**
 * Blockchain Proof
 * <b>With the Blockchain Proof API it is easy to prove or disprove existence of (binary) data at a certain point in time. Behind the scenes it stores entries using the Factom (bitcoin), Multichain or Ethereum blockchain by means of our generic blockchain API.</b>    The flow is generally as follows:  1. Make sure a configuration is present  2. Register content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing  3. Verify content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing. You will get back whether the content has been registered previously or not      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.9
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSDKBlockchainProof/ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.BlockchainProof) {
      root.BlockchainProof = {};
    }
    root.BlockchainProof.ChainSettings = factory(root.BlockchainProof.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The ChainSettings model module.
   * @module SphereonSDKBlockchainProof/model/ChainSettings
   * @version 0.9
   */

  /**
   * Constructs a new <code>ChainSettings</code>.
   * Existence ChainSettings. Normally you only supply them once during chain creation or during a settings update. You can also supply them during a content request, but then it is up to you to also supply the correct setting during verify
   * @alias module:SphereonSDKBlockchainProof/model/ChainSettings
   * @class
   * @param signatureHash {Blob} 
   * @param version {module:SphereonSDKBlockchainProof/model/ChainSettings.VersionEnum} The settings version (only 1 for now)
   */
  var exports = function(signatureHash, version) {
    var _this = this;

    _this['signatureHash'] = signatureHash;



    _this['version'] = version;

  };

  /**
   * Constructs a <code>ChainSettings</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:SphereonSDKBlockchainProof/model/ChainSettings} obj Optional instance to populate.
   * @return {module:SphereonSDKBlockchainProof/model/ChainSettings} The populated <code>ChainSettings</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('signatureHash')) {
        obj['signatureHash'] = ApiClient.convertToType(data['signatureHash'], 'Blob');
      }
      if (data.hasOwnProperty('contentRegistrationChains')) {
        obj['contentRegistrationChains'] = ApiClient.convertToType(data['contentRegistrationChains'], ['String']);
      }
      if (data.hasOwnProperty('proofChainId')) {
        obj['proofChainId'] = ApiClient.convertToType(data['proofChainId'], 'String');
      }
      if (data.hasOwnProperty('metadataRegistrationChains')) {
        obj['metadataRegistrationChains'] = ApiClient.convertToType(data['metadataRegistrationChains'], ['String']);
      }
      if (data.hasOwnProperty('version')) {
        obj['version'] = ApiClient.convertToType(data['version'], 'Number');
      }
      if (data.hasOwnProperty('hashAlgorithm')) {
        obj['hashAlgorithm'] = ApiClient.convertToType(data['hashAlgorithm'], 'String');
      }
    }
    return obj;
  }

  /**
   * @member {Blob} signatureHash
   */
  exports.prototype['signatureHash'] = undefined;
  /**
   * A set of content registration targets
   * @member {Array.<module:SphereonSDKBlockchainProof/model/ChainSettings.ContentRegistrationChainsEnum>} contentRegistrationChains
   */
  exports.prototype['contentRegistrationChains'] = undefined;
  /**
   * The proof chain id linked to the current configuration
   * @member {String} proofChainId
   */
  exports.prototype['proofChainId'] = undefined;
  /**
   * A set of metadata registration targets
   * @member {Array.<module:SphereonSDKBlockchainProof/model/ChainSettings.MetadataRegistrationChainsEnum>} metadataRegistrationChains
   */
  exports.prototype['metadataRegistrationChains'] = undefined;
  /**
   * The settings version (only 1 for now)
   * @member {module:SphereonSDKBlockchainProof/model/ChainSettings.VersionEnum} version
   */
  exports.prototype['version'] = undefined;
  /**
   * The hashing method used for the content
   * @member {module:SphereonSDKBlockchainProof/model/ChainSettings.HashAlgorithmEnum} hashAlgorithm
   */
  exports.prototype['hashAlgorithm'] = undefined;


  /**
   * Allowed values for the <code>contentRegistrationChains</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ContentRegistrationChainsEnum = {
    /**
     * value: "FILE_CHAIN"
     * @const
     */
    "FILE_CHAIN": "FILE_CHAIN",
    /**
     * value: "PROOF_CHAIN"
     * @const
     */
    "PROOF_CHAIN": "PROOF_CHAIN"  };

  /**
   * Allowed values for the <code>metadataRegistrationChains</code> property.
   * @enum {String}
   * @readonly
   */
  exports.MetadataRegistrationChainsEnum = {
    /**
     * value: "FILE_CHAIN"
     * @const
     */
    "FILE_CHAIN": "FILE_CHAIN",
    /**
     * value: "PROOF_CHAIN"
     * @const
     */
    "PROOF_CHAIN": "PROOF_CHAIN",
    /**
     * value: "METADATA_CHAIN"
     * @const
     */
    "METADATA_CHAIN": "METADATA_CHAIN"  };

  /**
   * Allowed values for the <code>version</code> property.
   * @enum {Number}
   * @readonly
   */
  exports.VersionEnum = {
    /**
     * value: 1
     * @const
     */
    "1": 1  };

  /**
   * Allowed values for the <code>hashAlgorithm</code> property.
   * @enum {String}
   * @readonly
   */
  exports.HashAlgorithmEnum = {
    /**
     * value: "SHA_256"
     * @const
     */
    "256": "SHA_256",
    /**
     * value: "SHA_512"
     * @const
     */
    "512": "SHA_512"  };


  return exports;
}));


