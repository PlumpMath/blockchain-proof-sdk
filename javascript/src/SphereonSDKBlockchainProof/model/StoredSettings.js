/**
 * Blockchain Proof
 * <b>With the Blockchain Proof API it is easy to prove or disprove existence of (binary) data at a certain point in time. Behind the scenes it stores entries using the Factom (bitcoin), Multichain or Ethereum blockchain by means of our generic blockchain API.</b>    The flow is generally as follows:  1. Make sure a configuration is present  2. Register content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing  3. Verify content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing. You will get back whether the content has been registered previously or not      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.9
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSDKBlockchainProof/ApiClient', 'SphereonSDKBlockchainProof/model/ChainConfiguration', 'SphereonSDKBlockchainProof/model/ChainSettings', 'SphereonSDKBlockchainProof/model/CommittedChain'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ChainConfiguration'), require('./ChainSettings'), require('./CommittedChain'));
  } else {
    // Browser globals (root is window)
    if (!root.BlockchainProof) {
      root.BlockchainProof = {};
    }
    root.BlockchainProof.StoredSettings = factory(root.BlockchainProof.ApiClient, root.BlockchainProof.ChainConfiguration, root.BlockchainProof.ChainSettings, root.BlockchainProof.CommittedChain);
  }
}(this, function(ApiClient, ChainConfiguration, ChainSettings, CommittedChain) {
  'use strict';




  /**
   * The StoredSettings model module.
   * @module SphereonSDKBlockchainProof/model/StoredSettings
   * @version 0.9
   */

  /**
   * Constructs a new <code>StoredSettings</code>.
   * The stored chainSettings from the chainSettings chain
   * @alias module:SphereonSDKBlockchainProof/model/StoredSettings
   * @class
   * @param settingsChain {module:SphereonSDKBlockchainProof/model/CommittedChain} 
   * @param chainSettings {module:SphereonSDKBlockchainProof/model/ChainSettings} 
   * @param context {String} 
   * @param chainConfiguration {module:SphereonSDKBlockchainProof/model/ChainConfiguration} 
   * @param validFrom {Date} 
   */
  var exports = function(settingsChain, chainSettings, context, chainConfiguration, validFrom) {
    var _this = this;

    _this['settingsChain'] = settingsChain;
    _this['chainSettings'] = chainSettings;
    _this['context'] = context;
    _this['chainConfiguration'] = chainConfiguration;
    _this['validFrom'] = validFrom;


  };

  /**
   * Constructs a <code>StoredSettings</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:SphereonSDKBlockchainProof/model/StoredSettings} obj Optional instance to populate.
   * @return {module:SphereonSDKBlockchainProof/model/StoredSettings} The populated <code>StoredSettings</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('settingsChain')) {
        obj['settingsChain'] = CommittedChain.constructFromObject(data['settingsChain']);
      }
      if (data.hasOwnProperty('chainSettings')) {
        obj['chainSettings'] = ChainSettings.constructFromObject(data['chainSettings']);
      }
      if (data.hasOwnProperty('context')) {
        obj['context'] = ApiClient.convertToType(data['context'], 'String');
      }
      if (data.hasOwnProperty('chainConfiguration')) {
        obj['chainConfiguration'] = ChainConfiguration.constructFromObject(data['chainConfiguration']);
      }
      if (data.hasOwnProperty('validFrom')) {
        obj['validFrom'] = ApiClient.convertToType(data['validFrom'], 'Date');
      }
      if (data.hasOwnProperty('metaDataChain')) {
        obj['metaDataChain'] = CommittedChain.constructFromObject(data['metaDataChain']);
      }
      if (data.hasOwnProperty('proofChain')) {
        obj['proofChain'] = CommittedChain.constructFromObject(data['proofChain']);
      }
    }
    return obj;
  }

  /**
   * @member {module:SphereonSDKBlockchainProof/model/CommittedChain} settingsChain
   */
  exports.prototype['settingsChain'] = undefined;
  /**
   * @member {module:SphereonSDKBlockchainProof/model/ChainSettings} chainSettings
   */
  exports.prototype['chainSettings'] = undefined;
  /**
   * @member {String} context
   */
  exports.prototype['context'] = undefined;
  /**
   * @member {module:SphereonSDKBlockchainProof/model/ChainConfiguration} chainConfiguration
   */
  exports.prototype['chainConfiguration'] = undefined;
  /**
   * @member {Date} validFrom
   */
  exports.prototype['validFrom'] = undefined;
  /**
   * @member {module:SphereonSDKBlockchainProof/model/CommittedChain} metaDataChain
   */
  exports.prototype['metaDataChain'] = undefined;
  /**
   * @member {module:SphereonSDKBlockchainProof/model/CommittedChain} proofChain
   */
  exports.prototype['proofChain'] = undefined;



  return exports;
}));


