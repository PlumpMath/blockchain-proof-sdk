/**
 * Blockchain Proof
 * <b>With the Blockchain Proof API it is easy to prove existence of (binary) data at a certain point in time. Behind the scenes it stores entries using the Factom (bitcoin) blockchain by means of our generic blockchain API.</b>    The flow is generally as follows:  1. Make sure a Proof chain has been created using the /chain POST endpoint beforehand. Normally you only need one or a handful of chains, during the entiry lifetime of your proof solution. This is a relative expensive operation in terms of money.  2. Store proof entries on the proof chain from step 1. The entries will contain the content and metadata you want to store forever on the specified chain.  3. Retrieve an existing entry from the chain to verify or retrieve data      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSDKBlockchainProof/ApiClient', 'SphereonSDKBlockchainProof/model/CommittedChain', 'SphereonSDKBlockchainProof/model/StoredSettings'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./CommittedChain'), require('./StoredSettings'));
  } else {
    // Browser globals (root is window)
    if (!root.BlockchainProof) {
      root.BlockchainProof = {};
    }
    root.BlockchainProof.SettingsResponse = factory(root.BlockchainProof.ApiClient, root.BlockchainProof.CommittedChain, root.BlockchainProof.StoredSettings);
  }
}(this, function(ApiClient, CommittedChain, StoredSettings) {
  'use strict';




  /**
   * The SettingsResponse model module.
   * @module SphereonSDKBlockchainProof/model/SettingsResponse
   * @version 0.1.0
   */

  /**
   * Constructs a new <code>SettingsResponse</code>.
   * The settings from the settings chain
   * @alias module:SphereonSDKBlockchainProof/model/SettingsResponse
   * @class
   * @param settingsChain {module:SphereonSDKBlockchainProof/model/CommittedChain} 
   * @param currentSettings {module:SphereonSDKBlockchainProof/model/StoredSettings} 
   * @param allSettings {Array.<module:SphereonSDKBlockchainProof/model/StoredSettings>} 
   * @param proofChain {module:SphereonSDKBlockchainProof/model/CommittedChain} 
   */
  var exports = function(settingsChain, currentSettings, allSettings, proofChain) {
    var _this = this;

    _this['settingsChain'] = settingsChain;
    _this['currentSettings'] = currentSettings;
    _this['allSettings'] = allSettings;
    _this['proofChain'] = proofChain;
  };

  /**
   * Constructs a <code>SettingsResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:SphereonSDKBlockchainProof/model/SettingsResponse} obj Optional instance to populate.
   * @return {module:SphereonSDKBlockchainProof/model/SettingsResponse} The populated <code>SettingsResponse</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('settingsChain')) {
        obj['settingsChain'] = CommittedChain.constructFromObject(data['settingsChain']);
      }
      if (data.hasOwnProperty('currentSettings')) {
        obj['currentSettings'] = StoredSettings.constructFromObject(data['currentSettings']);
      }
      if (data.hasOwnProperty('allSettings')) {
        obj['allSettings'] = ApiClient.convertToType(data['allSettings'], [StoredSettings]);
      }
      if (data.hasOwnProperty('proofChain')) {
        obj['proofChain'] = CommittedChain.constructFromObject(data['proofChain']);
      }
    }
    return obj;
  }

  /**
   * @member {module:SphereonSDKBlockchainProof/model/CommittedChain} settingsChain
   */
  exports.prototype['settingsChain'] = undefined;
  /**
   * @member {module:SphereonSDKBlockchainProof/model/StoredSettings} currentSettings
   */
  exports.prototype['currentSettings'] = undefined;
  /**
   * @member {Array.<module:SphereonSDKBlockchainProof/model/StoredSettings>} allSettings
   */
  exports.prototype['allSettings'] = undefined;
  /**
   * @member {module:SphereonSDKBlockchainProof/model/CommittedChain} proofChain
   */
  exports.prototype['proofChain'] = undefined;



  return exports;
}));


