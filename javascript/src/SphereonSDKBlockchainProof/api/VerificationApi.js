/**
 * Blockchain Proof
 * <b>With the Blockchain Proof API it is easy to prove or disprove existence of (binary) data at a certain point in time. Behind the scenes it stores entries using the Factom (bitcoin), Multichain or Ethereum blockchain by means of our generic blockchain API.</b>    The flow is generally as follows:  1. Make sure a configuration is present  2. Register content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing  3. Verify content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing. You will get back whether the content has been registered previously or not      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.9
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSDKBlockchainProof/ApiClient', 'SphereonSDKBlockchainProof/model/ContentRequest', 'SphereonSDKBlockchainProof/model/ErrorResponse', 'SphereonSDKBlockchainProof/model/StreamLocation', 'SphereonSDKBlockchainProof/model/VerifyContentResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ContentRequest'), require('../model/ErrorResponse'), require('../model/StreamLocation'), require('../model/VerifyContentResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.BlockchainProof) {
      root.BlockchainProof = {};
    }
    root.BlockchainProof.VerificationApi = factory(root.BlockchainProof.ApiClient, root.BlockchainProof.ContentRequest, root.BlockchainProof.ErrorResponse, root.BlockchainProof.StreamLocation, root.BlockchainProof.VerifyContentResponse);
  }
}(this, function(ApiClient, ContentRequest, ErrorResponse, StreamLocation, VerifyContentResponse) {
  'use strict';

  /**
   * Verification service.
   * @module SphereonSDKBlockchainProof/api/VerificationApi
   * @version 0.9
   */

  /**
   * Constructs a new VerificationApi. 
   * @alias module:SphereonSDKBlockchainProof/api/VerificationApi
   * @class
   * @param {module:SphereonSDKBlockchainProof/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:SphereonSDKBlockchainProof/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the verifyUsingContent operation.
     * @callback module:SphereonSDKBlockchainProof/api/VerificationApi~verifyUsingContentCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKBlockchainProof/model/VerifyContentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify content
     * Verify content. Please provide the content in the request. You also have to provide whether you have hashed the content yourself, or whether is should be done on the server side
     * @param {String} configName The configName for this operation
     * @param {module:SphereonSDKBlockchainProof/model/ContentRequest} existence Verify content using the current settings
     * @param {module:SphereonSDKBlockchainProof/api/VerificationApi~verifyUsingContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKBlockchainProof/model/VerifyContentResponse}
     */
    this.verifyUsingContent = function(configName, existence, callback) {
      var postBody = existence;

      // verify the required parameter 'configName' is set
      if (configName === undefined || configName === null) {
        throw new Error("Missing the required parameter 'configName' when calling verifyUsingContent");
      }

      // verify the required parameter 'existence' is set
      if (existence === undefined || existence === null) {
        throw new Error("Missing the required parameter 'existence' when calling verifyUsingContent");
      }


      var pathParams = {
        'configName': configName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = VerifyContentResponse;

      return this.apiClient.callApi(
        '/existence/{configName}/content', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyUsingLocation operation.
     * @callback module:SphereonSDKBlockchainProof/api/VerificationApi~verifyUsingLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKBlockchainProof/model/VerifyContentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify hash using the Storage API
     * Verify a hash of file/blob by supplying a Stream location of the Storage API. This Stream Location maps to a location of a file/blob on some remote cloud storage. Hashing will be done on the server side Please note that the binary data itself will not be stored, only the hash. Use the registerUsingContent endpoint if you&#39;d like to store content
     * @param {String} configName The context for this operation
     * @param {Array.<module:SphereonSDKBlockchainProof/model/StreamLocation>} streamLocations The stream locations on storage
     * @param {module:SphereonSDKBlockchainProof/api/VerificationApi~verifyUsingLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKBlockchainProof/model/VerifyContentResponse}
     */
    this.verifyUsingLocation = function(configName, streamLocations, callback) {
      var postBody = streamLocations;

      // verify the required parameter 'configName' is set
      if (configName === undefined || configName === null) {
        throw new Error("Missing the required parameter 'configName' when calling verifyUsingLocation");
      }

      // verify the required parameter 'streamLocations' is set
      if (streamLocations === undefined || streamLocations === null) {
        throw new Error("Missing the required parameter 'streamLocations' when calling verifyUsingLocation");
      }


      var pathParams = {
        'configName': configName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = VerifyContentResponse;

      return this.apiClient.callApi(
        '/existence/{configName}/streams/location', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyUsingStream operation.
     * @callback module:SphereonSDKBlockchainProof/api/VerificationApi~verifyUsingStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKBlockchainProof/model/VerifyContentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify bytestream/file hash
     * Verify a hash of content by supplying a file or some other binary data. Hashing will be done on the server side. Please note that the binary data itself will not be stored, only the hash. Use the registerUsingContent endpoint if you&#39;d like to store content
     * @param {String} configName The configuration name this operation
     * @param {File} stream The binary data (not hashed). Hashing will be done on the server side. The binary data will not be stored
     * @param {module:SphereonSDKBlockchainProof/api/VerificationApi~verifyUsingStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKBlockchainProof/model/VerifyContentResponse}
     */
    this.verifyUsingStream = function(configName, stream, callback) {
      var postBody = null;

      // verify the required parameter 'configName' is set
      if (configName === undefined || configName === null) {
        throw new Error("Missing the required parameter 'configName' when calling verifyUsingStream");
      }

      // verify the required parameter 'stream' is set
      if (stream === undefined || stream === null) {
        throw new Error("Missing the required parameter 'stream' when calling verifyUsingStream");
      }


      var pathParams = {
        'configName': configName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'stream': stream
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = VerifyContentResponse;

      return this.apiClient.callApi(
        '/existence/{configName}/streams/multipart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
