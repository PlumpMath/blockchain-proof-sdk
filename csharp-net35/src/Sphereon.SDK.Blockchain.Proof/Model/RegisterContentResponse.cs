/* 
 * Blockchain Proof
 *
 * With the Blockchain Proof API it is easy to prove or disprove existence of data at a certain point in time. Behind the scenes it stores entries using the Factom (bitcoin), Multichain or Ethereum blockchain by means of our generic blockchain API.    The flow is generally as follows:  1. Make sure a configuration is present  2. Register content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing  3. Verify content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing. You will get back whether the content has been registered previously or not    Full API Documentation: https://docs.sphereon.com/api/blockchain-proof/0.9/html  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 0.9
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Sphereon.SDK.Blockchain.Proof.Client.SwaggerDateConverter;

namespace Sphereon.SDK.Blockchain.Proof.Model
{
    /// <summary>
    /// Committed Content response
    /// </summary>
    [DataContract]
    public partial class RegisterContentResponse :  IEquatable<RegisterContentResponse>
    {

        /// <summary>
        /// Gets or Sets ContentRegistrationChainTypes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContentRegistrationChainTypesEnum
        {
            
            /// <summary>
            /// Enum PERHASHPROOFCHAIN for "PER_HASH_PROOF_CHAIN"
            /// </summary>
            [EnumMember(Value = "PER_HASH_PROOF_CHAIN")]
            PERHASHPROOFCHAIN,
            
            /// <summary>
            /// Enum SINGLEPROOFCHAIN for "SINGLE_PROOF_CHAIN"
            /// </summary>
            [EnumMember(Value = "SINGLE_PROOF_CHAIN")]
            SINGLEPROOFCHAIN
        }

        /// <summary>
        /// A set of content registration targets
        /// </summary>
        /// <value>A set of content registration targets</value>
        [DataMember(Name="contentRegistrationChainTypes", EmitDefaultValue=false)]
        public List<ContentRegistrationChainTypesEnum> ContentRegistrationChainTypes { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterContentResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RegisterContentResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterContentResponse" /> class.
        /// </summary>
        /// <param name="ContextName">ContextName (required).</param>
        /// <param name="SingleProofChain">This is the single proof chain where all hashes are stored (if configured).</param>
        /// <param name="ContentRegistrationChainTypes">A set of content registration targets.</param>
        /// <param name="RequestId">RequestId.</param>
        /// <param name="PerHashProofChain">This is the proof chain specific for the current hash (if configured).</param>
        public RegisterContentResponse(string ContextName = default(string), CommittedEntry SingleProofChain = default(CommittedEntry), List<ContentRegistrationChainTypesEnum> ContentRegistrationChainTypes = default(List<ContentRegistrationChainTypesEnum>), string RequestId = default(string), CommittedEntry PerHashProofChain = default(CommittedEntry))
        {
            // to ensure "ContextName" is required (not null)
            if (ContextName == null)
            {
                throw new InvalidDataException("ContextName is a required property for RegisterContentResponse and cannot be null");
            }
            else
            {
                this.ContextName = ContextName;
            }
            this.SingleProofChain = SingleProofChain;
            this.ContentRegistrationChainTypes = ContentRegistrationChainTypes;
            this.RequestId = RequestId;
            this.PerHashProofChain = PerHashProofChain;
        }
        
        /// <summary>
        /// Gets or Sets ContextName
        /// </summary>
        [DataMember(Name="contextName", EmitDefaultValue=false)]
        public string ContextName { get; set; }

        /// <summary>
        /// This is the single proof chain where all hashes are stored (if configured)
        /// </summary>
        /// <value>This is the single proof chain where all hashes are stored (if configured)</value>
        [DataMember(Name="singleProofChain", EmitDefaultValue=false)]
        public CommittedEntry SingleProofChain { get; set; }


        /// <summary>
        /// Gets or Sets RequestId
        /// </summary>
        [DataMember(Name="requestId", EmitDefaultValue=false)]
        public string RequestId { get; set; }

        /// <summary>
        /// This is the proof chain specific for the current hash (if configured)
        /// </summary>
        /// <value>This is the proof chain specific for the current hash (if configured)</value>
        [DataMember(Name="perHashProofChain", EmitDefaultValue=false)]
        public CommittedEntry PerHashProofChain { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegisterContentResponse {\n");
            sb.Append("  ContextName: ").Append(ContextName).Append("\n");
            sb.Append("  SingleProofChain: ").Append(SingleProofChain).Append("\n");
            sb.Append("  ContentRegistrationChainTypes: ").Append(ContentRegistrationChainTypes).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  PerHashProofChain: ").Append(PerHashProofChain).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RegisterContentResponse);
        }

        /// <summary>
        /// Returns true if RegisterContentResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of RegisterContentResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegisterContentResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ContextName == other.ContextName ||
                    this.ContextName != null &&
                    this.ContextName.Equals(other.ContextName)
                ) && 
                (
                    this.SingleProofChain == other.SingleProofChain ||
                    this.SingleProofChain != null &&
                    this.SingleProofChain.Equals(other.SingleProofChain)
                ) && 
                (
                    this.ContentRegistrationChainTypes == other.ContentRegistrationChainTypes ||
                    this.ContentRegistrationChainTypes != null &&
                    this.ContentRegistrationChainTypes.SequenceEqual(other.ContentRegistrationChainTypes)
                ) && 
                (
                    this.RequestId == other.RequestId ||
                    this.RequestId != null &&
                    this.RequestId.Equals(other.RequestId)
                ) && 
                (
                    this.PerHashProofChain == other.PerHashProofChain ||
                    this.PerHashProofChain != null &&
                    this.PerHashProofChain.Equals(other.PerHashProofChain)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ContextName != null)
                    hash = hash * 59 + this.ContextName.GetHashCode();
                if (this.SingleProofChain != null)
                    hash = hash * 59 + this.SingleProofChain.GetHashCode();
                if (this.ContentRegistrationChainTypes != null)
                    hash = hash * 59 + this.ContentRegistrationChainTypes.GetHashCode();
                if (this.RequestId != null)
                    hash = hash * 59 + this.RequestId.GetHashCode();
                if (this.PerHashProofChain != null)
                    hash = hash * 59 + this.PerHashProofChain.GetHashCode();
                return hash;
            }
        }

    }

}
