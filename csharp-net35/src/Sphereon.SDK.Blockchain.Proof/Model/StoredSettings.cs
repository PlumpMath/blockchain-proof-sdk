/* 
 * Blockchain Proof
 *
 * <b>With the Blockchain Proof API it is easy to prove existence of (binary) data at a certain point in time. Behind the scenes it stores entries using the Factom (bitcoin) blockchain by means of our generic blockchain API.</b>    The flow is generally as follows:  1. Make sure a Proof chain has been created using the /chain POST endpoint beforehand. Normally you only need one or a handful of chains, during the entiry lifetime of your proof solution. This is a relative expensive operation in terms of money.  2. Store proof entries on the proof chain from step 1. The entries will contain the content and metadata you want to store forever on the specified chain.  3. Retrieve an existing entry from the chain to verify or retrieve data      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.9.0-SNAPSHOT
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Sphereon.SDK.Blockchain.Proof.Client.SwaggerDateConverter;

namespace Sphereon.SDK.Blockchain.Proof.Model
{
    /// <summary>
    /// The stored chainSettings from the chainSettings chain
    /// </summary>
    [DataContract]
    public partial class StoredSettings :  IEquatable<StoredSettings>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StoredSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StoredSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StoredSettings" /> class.
        /// </summary>
        /// <param name="SettingsChain">SettingsChain (required).</param>
        /// <param name="ChainSettings">ChainSettings (required).</param>
        /// <param name="ChainConfiguration">ChainConfiguration (required).</param>
        /// <param name="MetaDataChain">MetaDataChain.</param>
        /// <param name="ProofChain">ProofChain.</param>
        public StoredSettings(CommittedChain SettingsChain = default(CommittedChain), ChainSettings ChainSettings = default(ChainSettings), ChainConfiguration ChainConfiguration = default(ChainConfiguration), CommittedChain MetaDataChain = default(CommittedChain), CommittedChain ProofChain = default(CommittedChain))
        {
            // to ensure "SettingsChain" is required (not null)
            if (SettingsChain == null)
            {
                throw new InvalidDataException("SettingsChain is a required property for StoredSettings and cannot be null");
            }
            else
            {
                this.SettingsChain = SettingsChain;
            }
            // to ensure "ChainSettings" is required (not null)
            if (ChainSettings == null)
            {
                throw new InvalidDataException("ChainSettings is a required property for StoredSettings and cannot be null");
            }
            else
            {
                this.ChainSettings = ChainSettings;
            }
            // to ensure "ChainConfiguration" is required (not null)
            if (ChainConfiguration == null)
            {
                throw new InvalidDataException("ChainConfiguration is a required property for StoredSettings and cannot be null");
            }
            else
            {
                this.ChainConfiguration = ChainConfiguration;
            }
            this.MetaDataChain = MetaDataChain;
            this.ProofChain = ProofChain;
        }
        
        /// <summary>
        /// Gets or Sets SettingsChain
        /// </summary>
        [DataMember(Name="settingsChain", EmitDefaultValue=false)]
        public CommittedChain SettingsChain { get; set; }

        /// <summary>
        /// Gets or Sets ChainSettings
        /// </summary>
        [DataMember(Name="chainSettings", EmitDefaultValue=false)]
        public ChainSettings ChainSettings { get; set; }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name="context", EmitDefaultValue=false)]
        public string Context { get; private set; }

        /// <summary>
        /// Gets or Sets ChainConfiguration
        /// </summary>
        [DataMember(Name="chainConfiguration", EmitDefaultValue=false)]
        public ChainConfiguration ChainConfiguration { get; set; }

        /// <summary>
        /// Gets or Sets ValidFrom
        /// </summary>
        [DataMember(Name="validFrom", EmitDefaultValue=false)]
        public DateTime? ValidFrom { get; private set; }

        /// <summary>
        /// Gets or Sets MetaDataChain
        /// </summary>
        [DataMember(Name="metaDataChain", EmitDefaultValue=false)]
        public CommittedChain MetaDataChain { get; set; }

        /// <summary>
        /// Gets or Sets ProofChain
        /// </summary>
        [DataMember(Name="proofChain", EmitDefaultValue=false)]
        public CommittedChain ProofChain { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoredSettings {\n");
            sb.Append("  SettingsChain: ").Append(SettingsChain).Append("\n");
            sb.Append("  ChainSettings: ").Append(ChainSettings).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  ChainConfiguration: ").Append(ChainConfiguration).Append("\n");
            sb.Append("  ValidFrom: ").Append(ValidFrom).Append("\n");
            sb.Append("  MetaDataChain: ").Append(MetaDataChain).Append("\n");
            sb.Append("  ProofChain: ").Append(ProofChain).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as StoredSettings);
        }

        /// <summary>
        /// Returns true if StoredSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of StoredSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoredSettings other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.SettingsChain == other.SettingsChain ||
                    this.SettingsChain != null &&
                    this.SettingsChain.Equals(other.SettingsChain)
                ) && 
                (
                    this.ChainSettings == other.ChainSettings ||
                    this.ChainSettings != null &&
                    this.ChainSettings.Equals(other.ChainSettings)
                ) && 
                (
                    this.Context == other.Context ||
                    this.Context != null &&
                    this.Context.Equals(other.Context)
                ) && 
                (
                    this.ChainConfiguration == other.ChainConfiguration ||
                    this.ChainConfiguration != null &&
                    this.ChainConfiguration.Equals(other.ChainConfiguration)
                ) && 
                (
                    this.ValidFrom == other.ValidFrom ||
                    this.ValidFrom != null &&
                    this.ValidFrom.Equals(other.ValidFrom)
                ) && 
                (
                    this.MetaDataChain == other.MetaDataChain ||
                    this.MetaDataChain != null &&
                    this.MetaDataChain.Equals(other.MetaDataChain)
                ) && 
                (
                    this.ProofChain == other.ProofChain ||
                    this.ProofChain != null &&
                    this.ProofChain.Equals(other.ProofChain)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.SettingsChain != null)
                    hash = hash * 59 + this.SettingsChain.GetHashCode();
                if (this.ChainSettings != null)
                    hash = hash * 59 + this.ChainSettings.GetHashCode();
                if (this.Context != null)
                    hash = hash * 59 + this.Context.GetHashCode();
                if (this.ChainConfiguration != null)
                    hash = hash * 59 + this.ChainConfiguration.GetHashCode();
                if (this.ValidFrom != null)
                    hash = hash * 59 + this.ValidFrom.GetHashCode();
                if (this.MetaDataChain != null)
                    hash = hash * 59 + this.MetaDataChain.GetHashCode();
                if (this.ProofChain != null)
                    hash = hash * 59 + this.ProofChain.GetHashCode();
                return hash;
            }
        }

    }

}
