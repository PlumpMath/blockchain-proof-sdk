/* 
 * Blockchain Proof
 *
 * <b>With the Blockchain Proof API it is easy to prove or disprove existence of (binary) data at a certain point in time. Behind the scenes it stores entries using the Factom (bitcoin), Multichain or Ethereum blockchain by means of our generic blockchain API.</b>    The flow is generally as follows:  1. Make sure a configuration is present  2. Register content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing  3. Verify content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing. You will get back whether the content has been registered previously or not      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.9
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Sphereon.SDK.Blockchain.Proof.Client.SwaggerDateConverter;

namespace Sphereon.SDK.Blockchain.Proof.Model
{
    /// <summary>
    /// Existence ChainSettings. Normally you only supply them once during chain creation or during a settings update. You can also supply them during a content request, but then it is up to you to also supply the correct setting during verify
    /// </summary>
    [DataContract]
    public partial class ChainSettings :  IEquatable<ChainSettings>
    {

        /// <summary>
        /// Gets or Sets ContentRegistrationChains
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContentRegistrationChainsEnum
        {
            
            /// <summary>
            /// Enum FILECHAIN for "FILE_CHAIN"
            /// </summary>
            [EnumMember(Value = "FILE_CHAIN")]
            FILECHAIN,
            
            /// <summary>
            /// Enum PROOFCHAIN for "PROOF_CHAIN"
            /// </summary>
            [EnumMember(Value = "PROOF_CHAIN")]
            PROOFCHAIN
        }


        /// <summary>
        /// Gets or Sets MetadataRegistrationChains
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MetadataRegistrationChainsEnum
        {
            
            /// <summary>
            /// Enum FILECHAIN for "FILE_CHAIN"
            /// </summary>
            [EnumMember(Value = "FILE_CHAIN")]
            FILECHAIN,
            
            /// <summary>
            /// Enum PROOFCHAIN for "PROOF_CHAIN"
            /// </summary>
            [EnumMember(Value = "PROOF_CHAIN")]
            PROOFCHAIN,
            
            /// <summary>
            /// Enum METADATACHAIN for "METADATA_CHAIN"
            /// </summary>
            [EnumMember(Value = "METADATA_CHAIN")]
            METADATACHAIN
        }

        /// <summary>
        /// The settings version (only 1 for now)
        /// </summary>
        /// <value>The settings version (only 1 for now)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VersionEnum
        {
            
            /// <summary>
            /// Enum NUMBER_1 for 1
            /// </summary>
            [EnumMember(Value = "1")]
            NUMBER_1 = 1
        }

        /// <summary>
        /// The hashing method used for the content
        /// </summary>
        /// <value>The hashing method used for the content</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HashAlgorithmEnum
        {
            
            /// <summary>
            /// Enum _256 for "SHA_256"
            /// </summary>
            [EnumMember(Value = "SHA_256")]
            _256,
            
            /// <summary>
            /// Enum _512 for "SHA_512"
            /// </summary>
            [EnumMember(Value = "SHA_512")]
            _512
        }

        /// <summary>
        /// A set of content registration targets
        /// </summary>
        /// <value>A set of content registration targets</value>
        [DataMember(Name="contentRegistrationChains", EmitDefaultValue=false)]
        public List<ContentRegistrationChainsEnum> ContentRegistrationChains { get; set; }
        /// <summary>
        /// A set of metadata registration targets
        /// </summary>
        /// <value>A set of metadata registration targets</value>
        [DataMember(Name="metadataRegistrationChains", EmitDefaultValue=false)]
        public List<MetadataRegistrationChainsEnum> MetadataRegistrationChains { get; set; }
        /// <summary>
        /// The settings version (only 1 for now)
        /// </summary>
        /// <value>The settings version (only 1 for now)</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public VersionEnum? Version { get; set; }
        /// <summary>
        /// The hashing method used for the content
        /// </summary>
        /// <value>The hashing method used for the content</value>
        [DataMember(Name="hashAlgorithm", EmitDefaultValue=false)]
        public HashAlgorithmEnum? HashAlgorithm { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChainSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChainSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChainSettings" /> class.
        /// </summary>
        /// <param name="ContentRegistrationChains">A set of content registration targets.</param>
        /// <param name="ProofChainId">The proof chain id linked to the current configuration.</param>
        /// <param name="MetadataRegistrationChains">A set of metadata registration targets.</param>
        /// <param name="Version">The settings version (only 1 for now) (required).</param>
        /// <param name="HashAlgorithm">The hashing method used for the content.</param>
        public ChainSettings(List<ContentRegistrationChainsEnum> ContentRegistrationChains = default(List<ContentRegistrationChainsEnum>), string ProofChainId = default(string), List<MetadataRegistrationChainsEnum> MetadataRegistrationChains = default(List<MetadataRegistrationChainsEnum>), VersionEnum? Version = default(VersionEnum?), HashAlgorithmEnum? HashAlgorithm = default(HashAlgorithmEnum?))
        {
            // to ensure "Version" is required (not null)
            if (Version == null)
            {
                throw new InvalidDataException("Version is a required property for ChainSettings and cannot be null");
            }
            else
            {
                this.Version = Version;
            }
            this.ContentRegistrationChains = ContentRegistrationChains;
            this.ProofChainId = ProofChainId;
            this.MetadataRegistrationChains = MetadataRegistrationChains;
            this.HashAlgorithm = HashAlgorithm;
        }
        
        /// <summary>
        /// Gets or Sets SignatureHash
        /// </summary>
        [DataMember(Name="signatureHash", EmitDefaultValue=false)]
        public byte[] SignatureHash { get; private set; }


        /// <summary>
        /// The proof chain id linked to the current configuration
        /// </summary>
        /// <value>The proof chain id linked to the current configuration</value>
        [DataMember(Name="proofChainId", EmitDefaultValue=false)]
        public string ProofChainId { get; set; }




        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChainSettings {\n");
            sb.Append("  SignatureHash: ").Append(SignatureHash).Append("\n");
            sb.Append("  ContentRegistrationChains: ").Append(ContentRegistrationChains).Append("\n");
            sb.Append("  ProofChainId: ").Append(ProofChainId).Append("\n");
            sb.Append("  MetadataRegistrationChains: ").Append(MetadataRegistrationChains).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  HashAlgorithm: ").Append(HashAlgorithm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ChainSettings);
        }

        /// <summary>
        /// Returns true if ChainSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of ChainSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChainSettings other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.SignatureHash == other.SignatureHash ||
                    this.SignatureHash != null &&
                    this.SignatureHash.Equals(other.SignatureHash)
                ) && 
                (
                    this.ContentRegistrationChains == other.ContentRegistrationChains ||
                    this.ContentRegistrationChains != null &&
                    this.ContentRegistrationChains.SequenceEqual(other.ContentRegistrationChains)
                ) && 
                (
                    this.ProofChainId == other.ProofChainId ||
                    this.ProofChainId != null &&
                    this.ProofChainId.Equals(other.ProofChainId)
                ) && 
                (
                    this.MetadataRegistrationChains == other.MetadataRegistrationChains ||
                    this.MetadataRegistrationChains != null &&
                    this.MetadataRegistrationChains.SequenceEqual(other.MetadataRegistrationChains)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                ) && 
                (
                    this.HashAlgorithm == other.HashAlgorithm ||
                    this.HashAlgorithm != null &&
                    this.HashAlgorithm.Equals(other.HashAlgorithm)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.SignatureHash != null)
                    hash = hash * 59 + this.SignatureHash.GetHashCode();
                if (this.ContentRegistrationChains != null)
                    hash = hash * 59 + this.ContentRegistrationChains.GetHashCode();
                if (this.ProofChainId != null)
                    hash = hash * 59 + this.ProofChainId.GetHashCode();
                if (this.MetadataRegistrationChains != null)
                    hash = hash * 59 + this.MetadataRegistrationChains.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                if (this.HashAlgorithm != null)
                    hash = hash * 59 + this.HashAlgorithm.GetHashCode();
                return hash;
            }
        }

    }

}
