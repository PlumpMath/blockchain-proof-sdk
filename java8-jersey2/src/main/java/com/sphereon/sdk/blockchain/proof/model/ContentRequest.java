/*
 * Blockchain Proof
 * <b>With the Blockchain Proof API it is easy to prove or disprove existence of (binary) data at a certain point in time. Behind the scenes it stores entries using the Factom (bitcoin), Multichain or Ethereum blockchain by means of our generic blockchain API.</b>    The flow is generally as follows:  1. Make sure a configuration is present  2. Register content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing  3. Verify content by uploading a file, some content, or providing a Stream Location from the Storage API. When you upload content you have to tell the API whether the data has already been hashed or not. If not, or when uploading a file or stream location, the API will take care of the hashing. You will get back whether the content has been registered previously or not      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.9
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.blockchain.proof.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Content existence request
 */
@ApiModel(description = "Content existence request")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-12-14T13:24:19.013+01:00")
public class ContentRequest {
  /**
   * When CLIENT is supplied the content should already have been hashed by you. When SERVER is supplied we will hash the content
   */
  public enum HashProviderEnum {
    SERVER("SERVER"),
    
    CLIENT("CLIENT");

    private String value;

    HashProviderEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static HashProviderEnum fromValue(String text) {
      for (HashProviderEnum b : HashProviderEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("hashProvider")
  private HashProviderEnum hashProvider = null;

  @JsonProperty("requestId")
  private String requestId = null;

  @JsonProperty("content")
  private byte[] content = null;

  public ContentRequest hashProvider(HashProviderEnum hashProvider) {
    this.hashProvider = hashProvider;
    return this;
  }

   /**
   * When CLIENT is supplied the content should already have been hashed by you. When SERVER is supplied we will hash the content
   * @return hashProvider
  **/
  @ApiModelProperty(required = true, value = "When CLIENT is supplied the content should already have been hashed by you. When SERVER is supplied we will hash the content")
  public HashProviderEnum getHashProvider() {
    return hashProvider;
  }

  public void setHashProvider(HashProviderEnum hashProvider) {
    this.hashProvider = hashProvider;
  }

  public ContentRequest requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * An id that will be returned in the response.
   * @return requestId
  **/
  @ApiModelProperty(value = "An id that will be returned in the response.")
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }

  public ContentRequest content(byte[] content) {
    this.content = content;
    return this;
  }

   /**
   * The content to register.
   * @return content
  **/
  @ApiModelProperty(required = true, value = "The content to register.")
  public byte[] getContent() {
    return content;
  }

  public void setContent(byte[] content) {
    this.content = content;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentRequest contentRequest = (ContentRequest) o;
    return Objects.equals(this.hashProvider, contentRequest.hashProvider) &&
        Objects.equals(this.requestId, contentRequest.requestId) &&
        Objects.equals(this.content, contentRequest.content);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashProvider, requestId, content);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentRequest {\n");
    
    sb.append("    hashProvider: ").append(toIndentedString(hashProvider)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

